import{_ as a,c as e,o as t,a2 as r}from"./chunks/framework.Bek_Mmwg.js";const f=JSON.parse('{"title":"声明文件","description":"","frontmatter":{},"headers":[],"relativePath":"前端框架/ts/编写声明文件.md","filePath":"前端框架/ts/编写声明文件.md"}'),l={name:"前端框架/ts/编写声明文件.md"},i=r('<ul><li><a href="#声明文件">声明文件</a><ul><li><a href="#判断包是否存在声明文件">判断包是否存在声明文件</a></li><li><a href="#语法">语法</a></li><li><a href="#书写声明文件">书写声明文件</a><ul><li><a href="#为-npm-写声明文件">为 npm 写声明文件</a></li><li><a href="#不校验指定包">不校验指定包</a></li><li><a href="#自动生成声明文件">自动生成声明文件</a></li></ul></li></ul></li></ul><h1 id="声明文件" tabindex="-1">声明文件 <a class="header-anchor" href="#声明文件" aria-label="Permalink to &quot;声明文件&quot;">​</a></h1><p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。</p><p>如 <code>jQuery</code> ，引入后直接使用如 <code>$.get(URL, callback)</code> 时，ts 会报错，因为 ts 不知道何为 <code>$</code> ，更不知道 <code>$</code> 有哪些属性方法。所以需要 <a href="https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html" target="_blank" rel="noreferrer"><code>声明文件</code></a> 让 ts 识别到第三方的特性。</p><p>声明文件是以 <code>xxx.d.ts</code> 的格式命名，它仅提供类型声明，不提供任何值、函数等，并且 ts 编译过程中，不会生成 js 文件。</p><h2 id="判断包是否存在声明文件" tabindex="-1">判断包是否存在声明文件 <a class="header-anchor" href="#判断包是否存在声明文件" aria-label="Permalink to &quot;判断包是否存在声明文件&quot;">​</a></h2><p><strong>包是否自带声明文件</strong></p><ol><li>自带声明的包在 npm 官方中查看包名旁具有 <code>TS</code> logo</li><li>package.json 中 types、typings 有值，这两个字段都表示声明文件路径</li><li>包的根目录包含 index.d.ts 文件（ts 先根据 types、typings 搜索，其次是 index.d.ts）</li></ol><p><strong>包是否存在社区维护的声明文件</strong></p><ol><li><a href="https://www.typescriptlang.org/dt/search" target="_blank" rel="noreferrer">社区声明文件网站</a> 上即可查询</li></ol><p>若包本身无自带声明文件并且社区也不维护其声明文件，这种情况下就需要在项目中去书写声明了。</p><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><p><a href="https://ts.xcatliu.com/basics/declaration-files.html#%E6%96%B0%E8%AF%AD%E6%B3%95%E7%B4%A2%E5%BC%95" target="_blank" rel="noreferrer">查看编写声明文件语法</a></p><h2 id="书写声明文件" tabindex="-1">书写声明文件 <a class="header-anchor" href="#书写声明文件" aria-label="Permalink to &quot;书写声明文件&quot;">​</a></h2><h3 id="为-npm-写声明文件" tabindex="-1">为 npm 写声明文件 <a class="header-anchor" href="#为-npm-写声明文件" aria-label="Permalink to &quot;为 npm 写声明文件&quot;">​</a></h3><p>在开发 npm 包时，或引用一个未提供声明文件的第三方库时，我们就需要自己书写声明文件。</p><p><a href="https://ts.xcatliu.com/basics/declaration-files.html#npm-%E5%8C%85" target="_blank" rel="noreferrer">如何为 npm 包写声明文件</a></p><h3 id="不校验指定包" tabindex="-1">不校验指定包 <a class="header-anchor" href="#不校验指定包" aria-label="Permalink to &quot;不校验指定包&quot;">​</a></h3><p>例如要绕过 jQuery 包的类型校验</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;jquery&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>该声明会将 <code>jquery</code> 模块声明为 any ，等同于不对 jQuery 模块进行检查。</p><h3 id="自动生成声明文件" tabindex="-1">自动生成声明文件 <a class="header-anchor" href="#自动生成声明文件" aria-label="Permalink to &quot;自动生成声明文件&quot;">​</a></h3><p>通过 ts 编写的项目，可在编译指令添加 <code>--declaration</code> 或在 <code>tsconfig.json</code> 添加 <code>declaration: true</code> 来自动生成声明文件。</p><p><a href="https://ts.xcatliu.com/basics/declaration-files.html#%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6" target="_blank" rel="noreferrer"></a></p>',24),s=[i];function o(n,c,d,h,p,u){return t(),e("div",null,s)}const m=a(l,[["render",o]]);export{f as __pageData,m as default};
