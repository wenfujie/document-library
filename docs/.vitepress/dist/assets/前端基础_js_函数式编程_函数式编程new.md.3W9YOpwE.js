import{_ as s,c as a,o as i,a2 as e}from"./chunks/framework.Bek_Mmwg.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端基础/js/函数式编程/函数式编程new.md","filePath":"前端基础/js/函数式编程/函数式编程new.md"}'),n={name:"前端基础/js/函数式编程/函数式编程new.md"},t=e(`<p>掘金小册<a href="https://juejin.cn/book/7173591403639865377?scrollMenuIndex=1" target="_blank" rel="noreferrer">JavaScript 函数式编程实践指南</a></p><h2 id="纯函数" tabindex="-1">纯函数 <a class="header-anchor" href="#纯函数" aria-label="Permalink to &quot;纯函数&quot;">​</a></h2><p>副作用的比喻：吃药治病，也伤了肠胃</p><p>显式数据流意味着函数除了入参和返回值之外，不以任何其它形式与外界进行数据交换。</p><h2 id="函数是一等公民" tabindex="-1">函数是一等公民 <a class="header-anchor" href="#函数是一等公民" aria-label="Permalink to &quot;函数是一等公民&quot;">​</a></h2><p>它意味着：</p><ul><li>可以被当作参数传递给其他函数</li><li>可以作为另一个函数的返回值</li><li>可以被赋值给一个变量</li></ul><h2 id="借助-reduce-实现-pipe-或者-compose" tabindex="-1">借助 reduce 实现 pipe 或者 compose <a class="header-anchor" href="#借助-reduce-实现-pipe-或者-compose" aria-label="Permalink to &quot;借助 reduce 实现 pipe 或者 compose&quot;">​</a></h2><p>第 14 节</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">funcs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> funcs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(callback, param);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="柯里化和偏函数解决函数多元问题" tabindex="-1">柯里化和偏函数解决函数多元问题 <a class="header-anchor" href="#柯里化和偏函数解决函数多元问题" aria-label="Permalink to &quot;柯里化和偏函数解决函数多元问题&quot;">​</a></h2><p>第 15 节</p><p>柯里化说的是一个 n 元函数变成 n 个一元函数。</p><p>偏函数说的是一个 n 元函数变成一个 m(m &lt; n） 元函数。</p><p>对于柯里化来说，不仅函数的元发生了变化，函数的数量也发生了变化（1 个变成 n 个）。</p><p>对于偏函数来说，仅有函数的元发生了变化（减少了），函数的数量是不变的。</p><h2 id="函数组合与柯里化结合" tabindex="-1">函数组合与柯里化结合 <a class="header-anchor" href="#函数组合与柯里化结合" aria-label="Permalink to &quot;函数组合与柯里化结合&quot;">​</a></h2><p>第 16 节</p><h2 id="oop-和-fp" tabindex="-1">OOP 和 FP <a class="header-anchor" href="#oop-和-fp" aria-label="Permalink to &quot;OOP 和 FP&quot;">​</a></h2><p>第 22 节</p><p>抽象：OOP 将数据与行为打包抽象为对象，对象是一等公民；而 FP 将行为抽象为函数，数据与行为是分离的，函数是一等公民。 代码重用：OOP 的核心在于继承，而 FP 的核心在于组合。</p><p>从行为和数据结构上去取舍使用 OOP 还是 FP</p>`,22),p=[t];function h(l,r,k,o,d,c){return i(),a("div",null,p)}const g=s(n,[["render",h]]);export{u as __pageData,g as default};
