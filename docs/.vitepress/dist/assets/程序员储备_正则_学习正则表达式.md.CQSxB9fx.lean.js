import{_ as a,c as t,o as n,a2 as i,l as s}from"./chunks/framework.Bek_Mmwg.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"程序员储备/正则/学习正则表达式.md","filePath":"程序员储备/正则/学习正则表达式.md"}'),l={name:"程序员储备/正则/学习正则表达式.md"},h=i("",6),k=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"元字符"),s("th",null,"描述")])]),s("tbody",null,[s("tr",null,[s("td",null,"."),s("td",null,"句号匹配任意单个字符除了换行符。")]),s("tr",null,[s("td",null,"[ ]"),s("td",null,"字符种类。匹配方括号内的任意字符。")]),s("tr",null,[s("td",null,"[^ ]"),s("td",null,"否定的字符种类。匹配除了方括号里的任意字符")]),s("tr",null,[s("td",null,"*"),s("td",null,"匹配>=0个重复的在*号之前的字符。")]),s("tr",null,[s("td",null,"+"),s("td",null,"匹配>=1个重复的+号前的字符。")]),s("tr",null,[s("td",null,"?"),s("td",null,"标记?之前的字符为可选.")]),s("tr",null,[s("td",{"n,m":""}),s("td",null,"匹配num个大括号之前的字符或字符集 (n <= num <= m).")]),s("tr",null,[s("td",null,"(xyz)"),s("td",null,"字符集，匹配与 xyz 完全相等的字符串.")]),s("tr",null,[s("td",null,"|"),s("td",null,"或运算符，匹配符号前或后的字符.")]),s("tr",null,[s("td",null,"\\"),s("td",null,"转义字符,用于匹配一些保留的字符 `[ ] ( ) { } . * + ? ^ $ \\")]),s("tr",null,[s("td",null,"^"),s("td",null,"从开始行开始匹配.")]),s("tr",null,[s("td",null,"$"),s("td",null,"从末端开始匹配.")])])],-1),p=i("",11),e=[h,k,p];function d(r,E,g,F,y,o){return n(),t("div",null,e)}const A=a(l,[["render",d]]);export{D as __pageData,A as default};
