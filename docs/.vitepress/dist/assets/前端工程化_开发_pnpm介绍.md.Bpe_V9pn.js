import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.Bek_Mmwg.js";const p="/assets/pnpm%E5%AE%98%E6%96%B9%E5%8E%9F%E7%90%86%E5%9B%BE.xjaOGVMU.jpg",F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端工程化/开发/pnpm介绍.md","filePath":"前端工程化/开发/pnpm介绍.md"}'),e={name:"前端工程化/开发/pnpm介绍.md"},l=n('<ul><li><a href="#npm-和-yarn-存在的问题">npm 和 yarn 存在的问题</a></li><li><a href="#pnpm-怎么解决这些问题">pnpm 怎么解决这些问题</a><ul><li><a href="#如何省磁盘空间">如何省磁盘空间</a></li><li><a href="#如何速度快">如何速度快</a></li><li><a href="#如何解决幽灵依赖">如何解决幽灵依赖</a></li></ul></li><li><a href="#pnpm-常用指令">pnpm 常用指令</a></li></ul><h2 id="npm-和-yarn-存在的问题" tabindex="-1">npm 和 yarn 存在的问题 <a class="header-anchor" href="#npm-和-yarn-存在的问题" aria-label="Permalink to &quot;npm 和 yarn 存在的问题&quot;">​</a></h2><p>npm v2 版本之前采用包嵌套形式，导致了以下问题：</p><ol><li>不同包底下会出现相同的依赖，占用了额外的硬盘空间</li><li>依赖层层嵌套，会出现引用路径过长问题（windows 的文件路径最长是 260 多个字符）</li></ol><p>npm v3 和 yarn 针对以上问题的解决方式：</p><blockquote><p>依赖不做嵌套，而是提升到外层平铺开来。</p></blockquote><p>引发新的问题：</p><ol><li>幽灵依赖：没有声明在 dependencies 里的依赖，仍然可以 import。（因为依赖已平铺到外层）</li><li>由于提升依赖只能提升一个版本，其他版本依然是以嵌套的形式存在，还是会存在浪费硬盘空间的情况</li></ol><h2 id="pnpm-怎么解决这些问题" tabindex="-1">pnpm 怎么解决这些问题 <a class="header-anchor" href="#pnpm-怎么解决这些问题" aria-label="Permalink to &quot;pnpm 怎么解决这些问题&quot;">​</a></h2><p>先了解<a href="https://www.cnblogs.com/itech/archive/2009/04/10/1433052.html" target="_blank" rel="noreferrer">软硬链接</a>概念：</p><ol><li>软链接 symbolic link：新建一个文件，文件内容指向另一个路径；</li><li>硬链接 hard link：直接引用文件的地址；</li></ol><p>pnpm 实现原理：将包及包的相关依赖平铺地安装到一个全局仓库（node_modules/.pnpm），项目中 <code>package.json</code> 下的依赖通过硬链接引用，包与包之间的依赖则是通过软链接引用。</p><p><img src="'+p+`" alt="pnpm官方原理图"></p><h3 id="如何省磁盘空间" tabindex="-1">如何省磁盘空间 <a class="header-anchor" href="#如何省磁盘空间" aria-label="Permalink to &quot;如何省磁盘空间&quot;">​</a></h3><ul><li>不会重复安装同一个包。使用 <code>npm/yarn</code> 时，100 个项目都使用了 <code>lodash</code> ，那 <code>lodash</code> 会被安装 100 次，磁盘中有 100 个地方写入这个包的代码。使用 <code>pnpm</code> 时每个包只会在全局仓库安装一次，不同项目使用 <code>硬链接（hardlink）</code> 引用。</li><li>安装了不同版本的包，新版本会最大程度去复用旧版的代码。比如 <code>lodash</code> 有 100 个文件，新版有 101 个文件，那么新版的包会保留旧版 100 个文件的硬链接和写入一个新文件。</li></ul><h3 id="如何速度快" tabindex="-1">如何速度快 <a class="header-anchor" href="#如何速度快" aria-label="Permalink to &quot;如何速度快&quot;">​</a></h3><ul><li>已存在包不再下载。若全局仓库中已存在项目所需包，则直接复用不再下载。</li><li>节省复制文件的时间。采用链接形式来引用，无需将包复制到项目下。</li></ul><h3 id="如何解决幽灵依赖" tabindex="-1">如何解决幽灵依赖 <a class="header-anchor" href="#如何解决幽灵依赖" aria-label="Permalink to &quot;如何解决幽灵依赖&quot;">​</a></h3><p><code>幽灵依赖</code> 指的是未在 <code>package.json</code> 中声明也可以直接导入使用的包。通常是因为 <code>npm/yarn</code> 将包与依赖包在项目下平铺，导致包虽然没声明，但也能引入使用。若包在更新后将部分依赖包删除，但业务代码使用了幽灵依赖是无法感知的，就会出现业务代码无法正常运行的安全问题。</p><p><code>pnpm</code> 在全局仓库平铺所有包，而在项目中， <code>node_modules</code> 的包跟 <code>package.json</code> 会保持一致，要使用包必须先在 <code>package.json</code> 中声明，安装后，<code>node_modules</code> 中的包会硬链接到全局仓库的包，包与包的依赖则是用软链接来处理，从而解决了幽灵依赖问题。</p><h2 id="pnpm-常用指令" tabindex="-1">pnpm 常用指令 <a class="header-anchor" href="#pnpm-常用指令" aria-label="Permalink to &quot;pnpm 常用指令&quot;">​</a></h2><p>安装</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装 pnpm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span></span></code></pre></div><p>包管理</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint@6.7.2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uninstall</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 移除不需要的包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span></span></code></pre></div><p>直接安装依赖，忽略查找命名空间</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ignore-workspace</span></span></code></pre></div><p>运行指令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># npm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># pnpm (少敲个run)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span></span></code></pre></div>`,29),t=[l];function h(d,o,k,r,c,m){return i(),a("div",null,t)}const u=s(e,[["render",h]]);export{F as __pageData,u as default};
