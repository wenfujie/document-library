import{_ as t,c as d,o as e,a2 as r}from"./chunks/framework.Bek_Mmwg.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端工程化/开发/vscode快捷键和终端指令.md","filePath":"前端工程化/开发/vscode快捷键和终端指令.md"}'),o={name:"前端工程化/开发/vscode快捷键和终端指令.md"},a=r('<ul><li><a href="#vscode-代码片段">vscode 代码片段</a><ul><li><a href="#import-and-export">Import and export</a></li><li><a href="#various-methods">Various methods</a></li><li><a href="#console-methods">Console methods</a></li></ul></li><li><a href="#vscode-快捷键">vscode 快捷键</a><ul><li><a href="#工作区快捷键">工作区快捷键</a></li><li><a href="#跳转操作">跳转操作</a></li><li><a href="#光标移动">光标移动</a></li><li><a href="#多光标编辑">多光标编辑</a></li><li><a href="#光标内容选取">光标内容选取</a></li><li><a href="#折叠代码">折叠代码</a></li><li><a href="#编辑代码">编辑代码</a></li><li><a href="#删除操作">删除操作</a></li><li><a href="#编程语言相关">编程语言相关</a></li><li><a href="#搜索相关">搜索相关</a></li></ul></li><li><a href="#vscode-插件">vscode 插件</a><ul><li><a href="#korofileheader">koroFileHeader</a></li><li><a href="#turbo-console-log">Turbo Console Log</a></li></ul></li><li><a href="#mac-常用终端指令">Mac 常用终端指令</a></li><li><a href="#后语">后语</a></li></ul><h2 id="vscode-代码片段" tabindex="-1">vscode 代码片段 <a class="header-anchor" href="#vscode-代码片段" aria-label="Permalink to &quot;vscode 代码片段&quot;">​</a></h2><h3 id="import-and-export" tabindex="-1">Import and export <a class="header-anchor" href="#import-and-export" aria-label="Permalink to &quot;Import and export&quot;">​</a></h3><table><thead><tr><th style="text-align:right;">Trigger</th><th>Content</th></tr></thead><tbody><tr><td style="text-align:right;"><code>imp→</code></td><td>imports entire module <code>import fs from &#39;fs&#39;;</code></td></tr><tr><td style="text-align:right;"><code>imn→</code></td><td>imports entire module without module name <code>import &#39;animate.css&#39;</code></td></tr><tr><td style="text-align:right;"><code>imd→</code></td><td>imports only a portion of the module using destructing <code>import {rename} from &#39;fs&#39;;</code></td></tr><tr><td style="text-align:right;"><code>env→</code></td><td>exports name variable <code>export const nameVariable = localVariable;</code></td></tr></tbody></table><h3 id="various-methods" tabindex="-1">Various methods <a class="header-anchor" href="#various-methods" aria-label="Permalink to &quot;Various methods&quot;">​</a></h3><table><thead><tr><th style="text-align:right;">Trigger</th><th>Content</th></tr></thead><tbody><tr><td style="text-align:right;"><code>fre→</code></td><td>forEach loop in ES6 syntax <code>array.forEach(currentItem =&gt; {})</code></td></tr><tr><td style="text-align:right;"><code>fof→</code></td><td>for ... of loop <code>for(const item of object) {}</code></td></tr><tr><td style="text-align:right;"><code>fin→</code></td><td>for ... in loop <code>for(const item in object) {}</code></td></tr><tr><td style="text-align:right;"><code>anfn→</code></td><td>creates an anonymous function <code>(params) =&gt; {}</code></td></tr><tr><td style="text-align:right;"><code>nfn→</code></td><td>creates a named function <code>const add = (params) =&gt; {}</code></td></tr><tr><td style="text-align:right;"><code>dob→</code></td><td>destructing object syntax <code>const {rename} = fs</code></td></tr><tr><td style="text-align:right;"><code>dar→</code></td><td>destructing array syntax <code>const [first, second] = [1,2]</code></td></tr><tr><td style="text-align:right;"><code>thenc→</code></td><td>adds then and catch declaration to a promise <code>.then((res) =&gt; {}).catch((err) =&gt; {});</code></td></tr><tr><td style="text-align:right;"><code>met→</code></td><td>creates a method inside a class <code>add() {}</code></td></tr></tbody></table><h3 id="console-methods" tabindex="-1">Console methods <a class="header-anchor" href="#console-methods" aria-label="Permalink to &quot;Console methods&quot;">​</a></h3><table><thead><tr><th style="text-align:right;">Trigger</th><th>Content</th></tr></thead><tbody><tr><td style="text-align:right;"><code>clg→</code></td><td>console log <code>console.log(object)</code></td></tr><tr><td style="text-align:right;"><code>clo→</code></td><td>console log object with name <code>console.log(&#39;object :&gt;&gt; &#39;, object);</code></td></tr></tbody></table><h2 id="vscode-快捷键" tabindex="-1">vscode 快捷键 <a class="header-anchor" href="#vscode-快捷键" aria-label="Permalink to &quot;vscode 快捷键&quot;">​</a></h2><p>vscode 用得熟不熟，就看你是否会用快捷键。</p><h3 id="工作区快捷键" tabindex="-1">工作区快捷键 <a class="header-anchor" href="#工作区快捷键" aria-label="Permalink to &quot;工作区快捷键&quot;">​</a></h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>Cmd + Shift + P</strong></td><td><strong>Ctrl + Shift + P</strong>，F1</td><td>显示命令面板</td><td></td></tr><tr><td><strong>Cmd + B</strong></td><td><strong>Ctrl + B</strong></td><td>显示/隐藏侧边栏</td><td>很实用</td></tr><tr><td><strong>Cmd + +、Cmd + -</strong></td><td><strong>ctrl + +、ctrl + -</strong></td><td>将工作区放大/缩小（包括代码字体、左侧导航栏）</td><td>在投影仪场景经常用到</td></tr><tr><td>Cmd + J</td><td>Ctrl + J</td><td>显示/隐藏控制台</td><td></td></tr><tr><td><strong>Cmd + Shift + N</strong></td><td><strong>Ctrl + Shift + N</strong></td><td>重新开一个软件的窗口</td><td>很常用</td></tr><tr><td>Cmd + Shift + W</td><td>Ctrl + Shift + W</td><td>关闭软件的当前窗口</td><td></td></tr><tr><td>Cmd + N</td><td>Ctrl + N</td><td>新建文件</td><td></td></tr><tr><td>Cmd + W</td><td>Ctrl + W</td><td>关闭当前文件</td><td></td></tr></tbody></table><h3 id="跳转操作" tabindex="-1">跳转操作 <a class="header-anchor" href="#跳转操作" aria-label="Permalink to &quot;跳转操作&quot;">​</a></h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>Cmd + Option + 左右方向键</strong></td><td>Ctrl + Pagedown/Pageup</td><td>在已经打开的<strong>多个文件</strong>之间进行切换</td><td>非常实用</td></tr><tr><td>Cmd + Shift + O</td><td>Ctrl + shift + O</td><td>在当前文件的各种<strong>方法之间</strong>（符号：Symbol）进行跳转</td><td></td></tr></tbody></table><h3 id="光标移动" tabindex="-1">光标移动 <a class="header-anchor" href="#光标移动" aria-label="Permalink to &quot;光标移动&quot;">​</a></h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>Cmd + k Cmd + q</td><td></td><td>回到编辑位置</td><td>不影响编辑内容</td></tr><tr><td><strong>option + 左右方向键</strong></td><td><strong>Ctrl + 左右方向键</strong></td><td>在<strong>单词</strong>之间移动光标</td><td>很常用</td></tr><tr><td><strong>Cmd + 左右方向键</strong></td><td><strong>Fn + 左右方向键</strong>（或 Win + 左右方向键）</td><td>将光标定位到当前行的最左侧、最右侧</td><td>很常用</td></tr><tr><td>Cmd + ↑</td><td>Ctrl + Home</td><td>将光标定位到文件的第一行</td><td></td></tr><tr><td>Cmd + ↓</td><td>Ctrl + End</td><td>将光标定位到文件的最后一行</td><td></td></tr><tr><td>Cmd + Shift + \\</td><td></td><td>在代码块之间移动光标</td><td></td></tr></tbody></table><h3 id="多光标编辑" tabindex="-1">多光标编辑 <a class="header-anchor" href="#多光标编辑" aria-label="Permalink to &quot;多光标编辑&quot;">​</a></h3><p>多光标选择在编程的<strong>提效</strong>方面可谓立下了汗马功劳。因为比较难记住，所以你要时不时回来复习这一段。</p><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>Option + 鼠标连续点击任意位置</strong></td><td><strong>Alt + 鼠标连续点击任意位置</strong></td><td>在任意位置，同时出现多个光标</td><td>很容易记住</td></tr><tr><td><strong>Cmd + Shift + L</strong></td><td><strong>Ctrl + Shift + L</strong></td><td>将光标放在某个单词的位置（或者先选中某个单词），然后按下快捷键，则所有的相同内容处，都会出现光标。</td><td>很常用。比如变量重命名的时候，就经常用到</td></tr><tr><td><strong>Option + Shift + i</strong></td><td><strong>Alt + Shift + I</strong></td><td>选中一堆文本后，按下快捷键，既可在<strong>每一行的末尾</strong>都出现一个光标。</td><td>很常用</td></tr></tbody></table><h3 id="光标内容选取" tabindex="-1">光标内容选取 <a class="header-anchor" href="#光标内容选取" aria-label="Permalink to &quot;光标内容选取&quot;">​</a></h3><p>多列选择是更高效的多光标选择，所以单独列成一小段。</p><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>Cmd + D</td><td>Ctrl + D</td><td>将光标放在某个单词下（无选中内容），触发快捷键会选中该单词，再次触发会查找该单词下一个出现的位置并选中。</td><td>较常用</td></tr><tr><td><strong>Option + Shift + i</strong></td><td><strong>Alt + Shift + I</strong></td><td>选中一堆文本后，按下快捷键，既可在<strong>每一行的末尾</strong>都出现一个光标。</td><td>很常用</td></tr><tr><td><strong>Option + Shift + 左右方向键</strong></td><td><strong>Alt + Shift + 左右方向键</strong></td><td>左右扩大/缩小选中的范围</td><td>很酷，极为高效</td></tr><tr><td>ctrol + cmd + shift + →</td><td></td><td>以光标为起点同时向左右扩大选中范围</td><td>→ 替换为 ← 即缩小范围。选中一句字符串时很高效。</td></tr></tbody></table><h3 id="折叠代码" tabindex="-1">折叠代码 <a class="header-anchor" href="#折叠代码" aria-label="Permalink to &quot;折叠代码&quot;">​</a></h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>cmd + option + [</td><td></td><td>折叠光标所在代码块的代码</td><td>&#39;[&#39;替换为&#39;]&#39; 即展开</td></tr><tr><td>cmd + k &amp;&amp; cmd + [</td><td></td><td>折叠光标所在代码块的代码，包含子代码块</td><td>&#39;[&#39;替换为&#39;]&#39; 即展开</td></tr><tr><td>cmd + k &amp;&amp; cmd + 0</td><td></td><td>折叠代码，其中 0 代表等级，支持 0,1,2,3,4,5 ，0 折叠所有 1 折叠第一层</td><td></td></tr><tr><td>cmd + k &amp;&amp; cmd + j</td><td></td><td>展开所有代码</td><td></td></tr></tbody></table><p>补充：</p><ol><li>折叠光标所在代码块所有的子代码块：先 cmd + k &amp;&amp; cmd + [ ，再 cmd + option + ] 展开即可。</li></ol><h3 id="编辑代码" tabindex="-1">编辑代码 <a class="header-anchor" href="#编辑代码" aria-label="Permalink to &quot;编辑代码&quot;">​</a></h3><table><thead><tr><th><strong>Cmd + Enter</strong></th><th><strong>Ctrl + Enter</strong></th><th>在当前行的下方新增一行，然后跳至该行</th><th>即使光标不在行尾，也能快速向下插入一行</th></tr></thead><tbody><tr><td>Cmd+Shift+Enter</td><td>Ctrl+Shift+Enter</td><td>在当前行的上方新增一行，然后跳至该行</td><td>即使光标不在行尾，也能快速向上插入一行</td></tr><tr><td><strong>Option + Shift + ↓</strong></td><td><strong>Alt + Shift + ↓</strong></td><td>将代码向下复制一行</td><td>写重复代码的利器</td></tr></tbody></table><p>补充</p><ol><li>将光标点击到某一行的任意位置时，默认就已经是<strong>选中全行</strong>了，此时可以直接<strong>复制</strong>或<strong>剪切</strong>，无需点击鼠标。这个非常实用，是所有的编辑操作中，使用得最频繁的。</li></ol><h3 id="删除操作" tabindex="-1">删除操作 <a class="header-anchor" href="#删除操作" aria-label="Permalink to &quot;删除操作&quot;">​</a></h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>Cmd + shift + K</td><td>Ctrl + Shift + K</td><td>删除整行</td><td>「Cmd + X」的作用是剪切，但也可以删除整行</td></tr><tr><td><strong>option + Backspace</strong></td><td><strong>Ctrl + Backspace</strong></td><td>删除光标之前的一个单词</td><td>英文有效，很常用</td></tr><tr><td>option + delete</td><td>Ctrl + delete</td><td>删除光标之后的一个单词</td><td>delete 键为 fn + backspace</td></tr><tr><td><strong>Cmd + Backspace</strong></td><td></td><td>删除光标之前的整行内容</td><td>很常用</td></tr><tr><td>Cmd + delete</td><td></td><td>删除光标之后的整行内容</td><td></td></tr></tbody></table><p>备注：上面所讲到的移动光标、编辑操作、删除操作的快捷键，在其他编辑器里，大部分都适用。</p><h3 id="编程语言相关" tabindex="-1">编程语言相关 <a class="header-anchor" href="#编程语言相关" aria-label="Permalink to &quot;编程语言相关&quot;">​</a></h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>Cmd + /</td><td>Ctrl + /</td><td>添加单行注释</td><td>很常用</td></tr><tr><td><strong>Option + Shift + F</strong></td><td>Alt + shift + F</td><td>代码格式化</td><td>很常用</td></tr></tbody></table><h3 id="搜索相关" tabindex="-1">搜索相关 <a class="header-anchor" href="#搜索相关" aria-label="Permalink to &quot;搜索相关&quot;">​</a></h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>Cmd + Shift + F</strong></td><td><strong>Ctrl + Shift +F</strong></td><td>全局搜索代码</td><td>很常用</td></tr><tr><td><strong>Cmd + P</strong></td><td><strong>Ctrl + P</strong></td><td>在当前的项目工程里，<strong>全局</strong>搜索文件名</td><td></td></tr><tr><td><strong>Cmd + G</strong></td><td><strong>F3</strong></td><td>在当前文件中搜索代码，光标仍停留在编辑器里</td><td>很巧妙</td></tr></tbody></table><h2 id="vscode-插件" tabindex="-1">vscode 插件 <a class="header-anchor" href="#vscode-插件" aria-label="Permalink to &quot;vscode 插件&quot;">​</a></h2><h3 id="korofileheader" tabindex="-1">koroFileHeader <a class="header-anchor" href="#korofileheader" aria-label="Permalink to &quot;koroFileHeader&quot;">​</a></h3><p>用来在 vscode 中增加文件头备注和方法备注快捷键。</p><table><thead><tr><th style="text-align:left;">mac</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;">ctrl + command + i</td><td style="text-align:left;">自动生成头部</td></tr><tr><td style="text-align:left;">ctrl + command + t</td><td style="text-align:left;">自动生成方法备注</td></tr></tbody></table><p>可配置自动更新头部，可参考：<a href="https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE%E5%AD%97%E6%AE%B5" target="_blank" rel="noreferrer">相关配置项</a></p><h3 id="turbo-console-log" tabindex="-1">Turbo Console Log <a class="header-anchor" href="#turbo-console-log" aria-label="Permalink to &quot;Turbo Console Log&quot;">​</a></h3><p>将光标放在变量上，用快捷键生成 log 代码，并可通过快捷键统一管理 log 代码。</p><table><thead><tr><th style="text-align:left;">mac</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;">control + option + L</td><td style="text-align:left;">生成 log</td></tr><tr><td style="text-align:left;">option + shift + c</td><td style="text-align:left;">注释文件下所有 log</td></tr><tr><td style="text-align:left;">option + shift + u</td><td style="text-align:left;">启用文件下所有 log</td></tr><tr><td style="text-align:left;">option + shift + d</td><td style="text-align:left;">删除文件下所有 log</td></tr></tbody></table><h2 id="mac-常用终端指令" tabindex="-1">Mac 常用终端指令 <a class="header-anchor" href="#mac-常用终端指令" aria-label="Permalink to &quot;Mac 常用终端指令&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">命令名</th><th style="text-align:center;">功能描述</th><th style="text-align:center;">使用举例</th></tr></thead><tbody><tr><td style="text-align:center;">mkdir</td><td style="text-align:center;">创建一个目录</td><td style="text-align:center;">mkdir dirname</td></tr><tr><td style="text-align:center;">rmdir</td><td style="text-align:center;">删除一个目录(空目录)</td><td style="text-align:center;">rmdir dirname</td></tr><tr><td style="text-align:center;">rm</td><td style="text-align:center;">删除文件或目录</td><td style="text-align:center;">rm filename 或者 rm -rf dist</td></tr><tr><td style="text-align:center;">cd</td><td style="text-align:center;">改变当前目录</td><td style="text-align:center;">cd dirname</td></tr><tr><td style="text-align:center;">ls</td><td style="text-align:center;">显示当前目录的内容</td><td style="text-align:center;">ls</td></tr><tr><td style="text-align:center;">touch</td><td style="text-align:center;">创建文件</td><td style="text-align:center;">touch test.txt</td></tr><tr><td style="text-align:center;">open</td><td style="text-align:center;">打开并编辑文件</td><td style="text-align:center;">open -e test.txt</td></tr><tr><td style="text-align:center;">cat</td><td style="text-align:center;">在终端显示文件内容</td><td style="text-align:center;">cat test.txt</td></tr><tr><td style="text-align:center;">rm</td><td style="text-align:center;">删除文件</td><td style="text-align:center;">rm test.txt</td></tr><tr><td style="text-align:center;">lsof -i :8080</td><td style="text-align:center;">查看什么进程在使用端口</td><td style="text-align:center;">lsof -i :8080</td></tr><tr><td style="text-align:center;">kill 进程 id</td><td style="text-align:center;">杀死进程</td><td style="text-align:center;">kill 22908</td></tr></tbody></table><p>解决进程被占用：</p><ul><li>lsof -i :8080 查看被什么进程使用（PID 为进程 id）</li><li>kill PID</li></ul><h2 id="后语" tabindex="-1">后语 <a class="header-anchor" href="#后语" aria-label="Permalink to &quot;后语&quot;">​</a></h2><p>参考文章</p><p><a href="https://github.com/qianguyihao/Web/blob/master/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/01-VS%20Code%E7%9A%84%E4%BD%BF%E7%94%A8.md" target="_blank" rel="noreferrer">vscode 的使用（star 20K）</a></p>',52),l=[a];function n(i,h,s,c,g,m){return e(),d("div",null,l)}const y=t(o,[["render",n]]);export{b as __pageData,y as default};
