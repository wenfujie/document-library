import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.Bek_Mmwg.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端工程化/测试/端到端测试.md","filePath":"前端工程化/测试/端到端测试.md"}'),l={name:"前端工程化/测试/端到端测试.md"},p=n(`<ul><li><a href="#-相关技术栈和工具">### 相关技术栈和工具</a><ul><li><a href="#bdd介绍">BDD介绍</a><ul><li><a href="#什么是bdd">什么是BDD？</a></li><li><a href="#bdd具体实现">BDD具体实现</a></li></ul></li></ul></li><li><a href="#-搭建e2e测试框架">### 搭建e2e测试框架</a><ul><li><a href="#初始化目录结构">初始化目录结构</a></li><li><a href="#初始化配置和环境">初始化配置和环境</a><ul><li><a href="#修改wdio配置">修改wdio配置</a></li></ul></li><li><a href="#测试用例编写和实现">测试用例编写和实现</a><ul><li><a href="#测试用例编写">测试用例编写</a></li><li><a href="#测试用例自动化的实现">测试用例自动化的实现</a></li><li><a href="#执行自动化测试">执行自动化测试</a></li></ul></li><li><a href="#输出测试结果报告并在浏览器展示">输出测试结果报告，并在浏览器展示</a></li></ul></li></ul><h3 id="相关技术栈和工具" tabindex="-1">相关技术栈和工具 <a class="header-anchor" href="#相关技术栈和工具" aria-label="Permalink to &quot;相关技术栈和工具&quot;">​</a></h3><hr><ul><li><a href="https://cucumber.io/docs/bdd/" target="_blank" rel="noreferrer">行为驱动开发（BDD）</a>：软件团队工作的一种方式</li><li><a href="https://webdriver.io/" target="_blank" rel="noreferrer">webdriverio</a>：适用于node的端到端测试框架</li><li><a href="https://cucumber.io/" target="_blank" rel="noreferrer">cucumber.js</a>：实现BDD开发的框架</li><li><a href="http://www.selenium.org.cn/" target="_blank" rel="noreferrer">selenium</a>：免费的分布式的自动化测试工具</li><li><a href="https://www.chaijs.com/" target="_blank" rel="noreferrer">chai</a>：测试中用到的断言工具</li><li><a href="http://cuketest.com/" target="_blank" rel="noreferrer">cukeTest</a>：快速编辑自动化脚本的编辑器</li><li><a href="https://www.mongodb.org.cn/" target="_blank" rel="noreferrer">mongodb</a>：数据库，断言会用到</li></ul><p><strong>实现效果：</strong> 自动打开谷歌浏览器，并模拟用户进行操作，测试后生成一份测试报告。</p><p><strong>备注：</strong> ==主要用到wdio（webdriverio简写）框架，wdio内置了cucumber.js、selenium，嫌麻烦重点看wdio和chai说明文档即可。==</p><h4 id="bdd介绍" tabindex="-1">BDD介绍 <a class="header-anchor" href="#bdd介绍" aria-label="Permalink to &quot;BDD介绍&quot;">​</a></h4><h5 id="什么是bdd" tabindex="-1">什么是BDD？ <a class="header-anchor" href="#什么是bdd" aria-label="Permalink to &quot;什么是BDD？&quot;">​</a></h5><p>BDD是软件团队工作的一种方式，它可以通过以下方式缩小业务人员和技术人员之间的差距：</p><blockquote><ol><li>鼓励跨角色协作以建立对要解决问题的共识</li><li>进行快速，小的迭代，以增加反馈和价值</li><li>生成系统文档，并根据系统行为自动检查</li></ol></blockquote><p>为此，我们将重点放在具体的实际示例上来开展协作工作，这些示例说明了我们希望系统如何运行。在持续的协作过程中，我们使用这些示例来指导我们从概念到实现。</p><h5 id="bdd具体实现" tabindex="-1">BDD具体实现 <a class="header-anchor" href="#bdd具体实现" aria-label="Permalink to &quot;BDD具体实现&quot;">​</a></h5><p>本质上，日常的BDD活动是一个三步骤的迭代过程：</p><blockquote><ol><li>首先，对系统进行一个小更改命名为“用户故事”，并讨论其新功能的具体测试用例，就预期要做的细节达成一致。</li><li>接下来，以一种可以自动化的方式记录这些测试用例。</li><li>最后，实现每个记录的测试用例所描述的行为，并以实现自动化测试的目标来指导功能代码的开发。</li></ol></blockquote><p>这样做的想法是改动较少的代码并快速迭代，将功能给到测试或产品。每次您自动化并实现一个新示例时，便为应用添加了一些有价值的东西，并得到及时的响应反馈，提高团队开发效率。</p><h3 id="搭建e2e测试框架" tabindex="-1">搭建e2e测试框架 <a class="header-anchor" href="#搭建e2e测试框架" aria-label="Permalink to &quot;搭建e2e测试框架&quot;">​</a></h3><hr><h4 id="初始化目录结构" tabindex="-1">初始化目录结构 <a class="header-anchor" href="#初始化目录结构" aria-label="Permalink to &quot;初始化目录结构&quot;">​</a></h4><p><a href="https://imgchr.com/i/8iaua4" target="_blank" rel="noreferrer"><img src="https://s2.ax1x.com/2020/03/10/8iaua4.png" alt="自动化测试目录结构"></a></p><h4 id="初始化配置和环境" tabindex="-1">初始化配置和环境 <a class="header-anchor" href="#初始化配置和环境" aria-label="Permalink to &quot;初始化配置和环境&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装wdio依赖，安装后会生成./node_modules/.bin/wdio文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @wdio/cli</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成wdio配置文件。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意：生成配置文件过程会让你选择报告插件、BDD框架、是否开启同步模式、浏览器驱动。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 我的配置是选择allure-reporter报告、cucumber框架、开启同步模式、chromedriver驱动，选择后会自动安装所需依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./node_modules/.bin/wdio</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装断言依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chai</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加启动指令到package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    &quot;scripts&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        &quot;test:e2e&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;wdio ./test/e2e/wdio.conf.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>注意：</p><ol><li>电脑需安装Java 8</li><li>依赖包chromedriver版本要和chrome浏览器版本一致，否则自动打开浏览器会闪退</li><li>node需要版本10以上，否则报错</li></ol><h5 id="修改wdio配置" tabindex="-1">修改wdio配置 <a class="header-anchor" href="#修改wdio配置" aria-label="Permalink to &quot;修改wdio配置&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将wdio.conf.js移到test/e2e/下</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改wdio.conf.js中配置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/wd/hub&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 由于使用chromedriver，此处配置成谷歌服务路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    specs: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;./test/e2e/features/*.feature&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 要检索测试用例的路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bail: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行测试失败对应次数后，停止测试</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    capabilities: [{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        maxInstances: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        browserName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chrome&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 配置 无浏览器测试（如不需要将goog:chromeOptions注释）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;goog:chromeOptions&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          args: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;--headless&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;--disable-gpu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logLevel: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;silent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 日志等级silent简单，info详细</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    baseUrl: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:9528/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基础路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    services: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chromedriver&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 浏览器驱动</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    framework: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cucumber&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// BDD框架</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 报告生成路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reporters: [[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;allure&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        outputDir: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./test/e2e/reports/allure-results/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        disableWebdriverStepsReporting: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        disableWebdriverScreenshotsReporting: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }]],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // cucumber配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cucumberOpts: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            require: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./test/e2e/stepDefinitions/**/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实现步骤代码的路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }，</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="测试用例编写和实现" tabindex="-1">测试用例编写和实现 <a class="header-anchor" href="#测试用例编写和实现" aria-label="Permalink to &quot;测试用例编写和实现&quot;">​</a></h4><h5 id="测试用例编写" tabindex="-1">测试用例编写 <a class="header-anchor" href="#测试用例编写" aria-label="Permalink to &quot;测试用例编写&quot;">​</a></h5><p>由于上文wdio配置中已配置specs: [&#39;./test/e2e/features/*.feature&#39;]， 所以wdio会检索该目录下的所有feature文件</p><div class="language-feature vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">feature</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 新建test.feature于目录test/e2e/features/</span></span>
<span class="line"><span>// 并增加如下内容</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 剧本标题</span></span>
<span class="line"><span>Feature: 百度使用测试</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  # 场景名称</span></span>
<span class="line"><span>  Scenario Outline: 百度标题是否正确</span></span>
<span class="line"><span>    # 具体步骤，共有Given、When、Then三个关键词来标识所有步骤</span></span>
<span class="line"><span>    When 进入百度网站</span></span>
<span class="line"><span>    Then 网站标题为&quot;&lt;title&gt;&quot;</span></span>
<span class="line"><span>    # 例子：程序会按照例子中每一行数据来执行场景步骤</span></span>
<span class="line"><span>    Examples:</span></span>
<span class="line"><span>      | title     |</span></span>
<span class="line"><span>      | 百度一下，你就知道 |</span></span></code></pre></div><h5 id="测试用例自动化的实现" tabindex="-1">测试用例自动化的实现 <a class="header-anchor" href="#测试用例自动化的实现" aria-label="Permalink to &quot;测试用例自动化的实现&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 新建hook.js 与目录test/e2e/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动化测试钩子</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将一些常用api设置成全局变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> chai</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    global.expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chai.expect;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    global.assert </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chai.assert;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    global.should </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chai.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">should</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Given</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">When</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cucumber&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    global.Given </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Given;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    global.When </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> When;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    global.Then </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Then;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./pageObjects/page.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    global.global_page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 每个场景结束后，增加截图展示</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  afterScenario</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">scenarioResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    browser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">takeScreenshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// wdio.conf.js</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将hook导入wdio配置中</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hook</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./hook&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 导入自定义配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hook,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 新建given.js、when.js、then.js于目录test/e2e/stepDefinitions/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// feature文件中Given、When、Then步骤的逻辑要在这三个文件中实现</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// when.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">When</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;进入百度网站&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  browser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.baidu.com/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// then.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;网站标题为{string}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> browserTitle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(browserTitle).to.be.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(title);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><strong>其中</strong></p><ul><li><strong>browser</strong>为wdio的全局对象，用来操作浏览器，具体看<a href="https://webdriver.io/docs/api.html" target="_blank" rel="noreferrer">官网api</a></li><li><strong>expect</strong>为chai断言中的一种，用于预期结果的判断（如上例子判断当前浏览器的标题和例子中&#39;百度一下，你就知道&#39;是相等的）</li></ul><h5 id="执行自动化测试" tabindex="-1">执行自动化测试 <a class="header-anchor" href="#执行自动化测试" aria-label="Permalink to &quot;执行自动化测试&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 由于上文已将启动指令添加到package.json中，直接运行即可</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test:e2e</span></span></code></pre></div><p>运行后，浏览器会自动执行步骤，控制台会打印执行日志信息</p><h4 id="输出测试结果报告-并在浏览器展示" tabindex="-1">输出测试结果报告，并在浏览器展示 <a class="header-anchor" href="#输出测试结果报告-并在浏览器展示" aria-label="Permalink to &quot;输出测试结果报告，并在浏览器展示&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装测试报告生成工具</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> allure-commandline</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># package.json 中增加scripts指令，用于生成报告</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;allure-report&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cd test/e2e/reports &amp;&amp; allure generate --clean ./allure-results &amp;&amp; allure open&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成allure报告，并在浏览器打开（此时不可打开vpn，否则读取不到服务数据）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 先手动删除test/e2e/reports/allure-results 文件夹，否则有旧的测试缓存</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> allure-report</span></span></code></pre></div><p><a href="https://imgchr.com/i/8iaKIJ" target="_blank" rel="noreferrer"><img src="https://s2.ax1x.com/2020/03/10/8iaKIJ.md.png" alt="测试报告"></a></p>`,41),h=[p];function e(t,k,r,E,d,g){return a(),i("div",null,h)}const y=s(l,[["render",e]]);export{o as __pageData,y as default};
