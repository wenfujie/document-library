import{_ as i,c as a,o as s,a2 as e}from"./chunks/framework.Bek_Mmwg.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端基础/浏览器/DOM事件总结.md","filePath":"前端基础/浏览器/DOM事件总结.md"}'),t={name:"前端基础/浏览器/DOM事件总结.md"},n=e(`<ul><li><a href="#前言">前言</a></li><li><a href="#dom事件的级别">DOM事件的级别</a></li><li><a href="#dom事件模型dom事件流">DOM事件模型、DOM事件流</a><ul><li><a href="#dom事件模型">DOM事件模型</a></li><li><a href="#dom事件流">DOM事件流</a></li></ul></li><li><a href="#描述dom事件捕获的具体流程">描述DOM事件捕获的具体流程</a><ul><li><a href="#捕获的流程">捕获的流程</a></li><li><a href="#冒泡的流程">冒泡的流程</a></li></ul></li><li><a href="#event对象的常见-api-方法">Event对象的常见 api 方法</a><ul><li><a href="#方法一">方法一</a></li><li><a href="#方法二阻止冒泡阻止捕获">方法二：阻止冒泡、阻止捕获</a></li><li><a href="#方法三设置事件优先级">方法三：设置事件优先级</a></li><li><a href="#属性4属性5事件委托中用到">属性4、属性5（事件委托中用到）</a></li></ul></li><li><a href="#自定义事件">自定义事件</a></li><li><a href="#事件委托">事件委托</a></li></ul><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p><strong>知识点主要包括以下几个方面：</strong></p><ul><li>基本概念：DOM事件的级别</li></ul><p>面试不会直接问你，DOM有几个级别。但会在题目中体现：“请用DOM2 ....”。</p><ul><li>DOM事件模型、DOM事件流</li></ul><p>面试官如果问你“ <strong>DOM事件模型</strong> ”，你不一定知道怎么回事。其实说的就是 <strong>捕获和冒泡</strong> 。</p><p><strong>DOM事件流</strong> ，指的是事件传递的 <strong>三个阶段</strong> 。</p><ul><li>描述DOM事件捕获的具体流程</li></ul><p>讲的是事件的传递顺序。参数为false（默认）、参数为true，各自代表事件在什么阶段触发。</p><p>能回答出来的人，寥寥无几。也许有些人可以说出一大半，但是一字不落的人，极少。</p><ul><li>Event对象的常见应用（Event的常用api方法）</li></ul><p>DOM事件的知识点，一方面包括事件的流程；另一方面就是：怎么去注册事件，也就是监听用户的交互行为。第三点：在响应时，Event对象是非常重要的。</p><ul><li>自定义事件（非常重要）</li></ul><p>一般人可以讲出事件和注册事件，但是如果让你讲 <strong>自定义事件</strong> ，能知道的人，就更少了。</p><ul><li>事件委托</li></ul><p>业务中经常用到。</p><p>下面分别讲解。</p><h2 id="dom事件的级别" tabindex="-1">DOM事件的级别 <a class="header-anchor" href="#dom事件的级别" aria-label="Permalink to &quot;DOM事件的级别&quot;">​</a></h2><p>DOM事件的级别，准确来说，是 <strong>DOM标准</strong> 定义的级别。包括：</p><p><strong>DOM0的写法：</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {}</span></span></code></pre></div><p>上面的代码是在 js 中的写法；如果要在html中写，写法是：在onclick属性中，加 js 语句。</p><p><strong>DOM2的写法：</strong></p><pre><code>  \`\`\`javascript
    element.addEventListener(&#39;click&#39;, function () {

    }, false);
  \`\`\`
</code></pre><p>【重要】上面的第三参数中， <strong>true</strong> 表示事件在 <strong>捕获阶段</strong> 触发， <strong>false</strong> 表示事件在 <strong>冒泡阶段</strong> 触发（默认）。如果不写，则默认为false。</p><p><strong>DOM3的写法：</strong></p><pre><code>    element.addEventListener(&#39;keyup&#39;, function () {

    }, false);
</code></pre><p>DOM3中，增加了很多事件类型，比如鼠标事件、键盘事件等。</p><p>PS：为何事件没有DOM1的写法呢？因为，DOM1标准制定的时候，没有涉及与事件相关的内容。</p><p><strong>总结</strong> ：关于“DOM事件的级别”，能回答出以上内容即可，不会出题目让你做。</p><h2 id="dom事件模型、dom事件流" tabindex="-1">DOM事件模型、DOM事件流 <a class="header-anchor" href="#dom事件模型、dom事件流" aria-label="Permalink to &quot;DOM事件模型、DOM事件流&quot;">​</a></h2><h3 id="dom事件模型" tabindex="-1">DOM事件模型 <a class="header-anchor" href="#dom事件模型" aria-label="Permalink to &quot;DOM事件模型&quot;">​</a></h3><p>DOM事件模型讲的就是 <strong>捕获和冒泡</strong> ，一般人都能回答出来。</p><ul><li><p>捕获：从上往下。</p></li><li><p>冒泡：从下（目标元素）往上。</p></li></ul><h3 id="dom事件流" tabindex="-1">DOM事件流 <a class="header-anchor" href="#dom事件流" aria-label="Permalink to &quot;DOM事件流&quot;">​</a></h3><p>DOM事件流讲的就是：浏览器在于当前页面做交互时，这个事件是怎么传递到页面上的。</p><p>类似于Android里面的事件传递。</p><p>完整的事件流，分三个阶段：</p><ul><li><p>（1）捕获：从 window 对象传到 目标元素。</p></li><li><p>（2）目标阶段：事件通过捕获，到达目标元素，这个阶段就是目标阶段。</p></li><li><p>（3）冒泡：从 <strong>目标元素</strong> 传到 Window 对象。</p></li></ul><p><a href="https://camo.githubusercontent.com/5310ee705bdad832770ecbc58e8459be474f82b3a2ebea2d22518084a4507970/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313035382e706e67" target="_blank" rel="noreferrer"><img src="https://camo.githubusercontent.com/5310ee705bdad832770ecbc58e8459be474f82b3a2ebea2d22518084a4507970/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313035382e706e67" alt=""></a></p><p><a href="https://camo.githubusercontent.com/6dc3dcf8dff8643224f662f03b4f69120ec34aab8830529643d5f94995c07faf/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f313231382e6a7067" target="_blank" rel="noreferrer"><img src="https://camo.githubusercontent.com/6dc3dcf8dff8643224f662f03b4f69120ec34aab8830529643d5f94995c07faf/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230345f313231382e6a7067" alt=""></a></p><h2 id="描述dom事件捕获的具体流程" tabindex="-1">描述DOM事件捕获的具体流程 <a class="header-anchor" href="#描述dom事件捕获的具体流程" aria-label="Permalink to &quot;描述DOM事件捕获的具体流程&quot;">​</a></h2><blockquote><p>很少有人能说完整。</p></blockquote><h3 id="捕获的流程" tabindex="-1">捕获的流程 <a class="header-anchor" href="#捕获的流程" aria-label="Permalink to &quot;捕获的流程&quot;">​</a></h3><p><a href="https://camo.githubusercontent.com/b09bfda17342c70de356b5d3cbb42577d1d3c9eaeb1617be618e2b332bdf1871/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313130332e706e67" target="_blank" rel="noreferrer"><img src="https://camo.githubusercontent.com/b09bfda17342c70de356b5d3cbb42577d1d3c9eaeb1617be618e2b332bdf1871/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313130332e706e67" alt=""></a></p><p><strong>说明</strong> ：捕获阶段，事件依次传递的顺序是：window --&gt; document --&gt; html--&gt; body --&gt; 父元素、子元素、目标元素。</p><p>PS1：第一个接收到事件的对象是 <strong>window</strong> （有人会说body，有人会说html，这都是错误的）。</p><p>PS2：JS中涉及到DOM对象时，有两个对象最常用：window、doucument。它们俩也是最先获取到事件的。</p><p>代码如下：</p><pre><code>    window.addEventListener(&quot;click&quot;, function () {
        alert(&quot;捕获 window&quot;);
    }, true);

    document.addEventListener(&quot;click&quot;, function () {
        alert(&quot;捕获 document&quot;);
    }, true);

    document.documentElement.addEventListener(&quot;click&quot;, function () {
        alert(&quot;捕获 html&quot;);
    }, true);

    document.body.addEventListener(&quot;click&quot;, function () {
        alert(&quot;捕获 body&quot;);
    }, true);

    fatherBox.addEventListener(&quot;click&quot;, function () {
        alert(&quot;捕获 father&quot;);
    }, true);

    childBox.addEventListener(&quot;click&quot;, function () {
        alert(&quot;捕获 child&quot;);
    }, true);
</code></pre><p><strong>补充一个知识点：</strong></p><p>在 js中：</p><ul><li><p>如果想获取 <code>body</code> 节点，方法是：<code>document.body</code>；</p></li><li><p>但是，如果想获取 <code>html</code>节点，方法是<code>document.documentElement</code>。</p></li></ul><h3 id="冒泡的流程" tabindex="-1">冒泡的流程 <a class="header-anchor" href="#冒泡的流程" aria-label="Permalink to &quot;冒泡的流程&quot;">​</a></h3><p>与捕获的流程相反</p><h2 id="event对象的常见-api-方法" tabindex="-1">Event对象的常见 api 方法 <a class="header-anchor" href="#event对象的常见-api-方法" aria-label="Permalink to &quot;Event对象的常见 api 方法&quot;">​</a></h2><p>用户做的是什么操作（比如，是敲键盘了，还是点击鼠标了），这些事件基本都是通过Event对象拿到的。这些都比较简单，我们就不讲了。我们来看看下面这几个方法：</p><h3 id="方法一" tabindex="-1">方法一 <a class="header-anchor" href="#方法一" aria-label="Permalink to &quot;方法一&quot;">​</a></h3><pre><code>    event.preventDefault();
</code></pre><p>解释：阻止默认事件。</p><p>比如，已知<code>&lt;a&gt;</code>标签绑定了click事件，此时，如果给<code>&lt;a&gt;</code>设置了这个方法，就阻止了链接的默认跳转。</p><h3 id="方法二-阻止冒泡、阻止捕获" tabindex="-1">方法二：阻止冒泡、阻止捕获 <a class="header-anchor" href="#方法二-阻止冒泡、阻止捕获" aria-label="Permalink to &quot;方法二：阻止冒泡、阻止捕获&quot;">​</a></h3><p>这个在业务中很常见。</p><p>有的时候，业务中不需要事件进行冒泡。比如说，业务这样要求：单击子元素做事件A，单击父元素做事件B，如果不阻止冒泡的话，出现的问题是：单击子元素时，子元素和父元素都会做事件A。这个时候，就要用到阻止冒泡了。</p><p>w3c的方法：（火狐、谷歌、IE11）</p><pre><code>    event.stopPropagation();
</code></pre><p>IE10以下则是：</p><pre><code>	event.cancelBubble = true;
</code></pre><p>兼容代码如下：</p><pre><code>   box3.onclick = function (event) {

        alert(&quot;child&quot;);

        //阻止冒泡
        event = event || window.event;

        if (event &amp;&amp; event.stopPropagation) {
            event.stopPropagation();
        } else {
            event.cancelBubble = true;
        }
    }
</code></pre><p>上方代码中，我们对box3进行了阻止冒泡，产生的效果是：事件不会继续传递到 father、grandfather、body了。</p><h3 id="方法三-设置事件优先级" tabindex="-1">方法三：设置事件优先级 <a class="header-anchor" href="#方法三-设置事件优先级" aria-label="Permalink to &quot;方法三：设置事件优先级&quot;">​</a></h3><pre><code>    event.stopImmediatePropagation();
</code></pre><p>这个方法比较长，一般人没听说过。解释如下：</p><p>比如说，我用addEventListener给某按钮同时注册了事件A、事件B。此时，如果我单击按钮，就会依次执行事件A和事件B。现在要求：单击按钮时，只执行事件A，不执行事件B。该怎么做呢？这是时候，就可以用到<code>stopImmediatePropagation</code>方法了。做法是：在事件A的响应函数中加入这句话。</p><p>大家要记住 event 有这个方法。</p><h3 id="属性4、属性5-事件委托中用到" tabindex="-1">属性4、属性5（事件委托中用到） <a class="header-anchor" href="#属性4、属性5-事件委托中用到" aria-label="Permalink to &quot;属性4、属性5（事件委托中用到）&quot;">​</a></h3><pre><code>    event.currentTarget   //当前所绑定的事件对象。在事件委托中，指的是【父元素】。

    event.target  //当前被点击的元素。在事件委托中，指的是【子元素】。
</code></pre><p>上面这两个属性，在事件委托中经常用到。</p><p><strong>总结</strong> ：上面这几项，非常重要，但是容易弄混淆。</p><h2 id="自定义事件" tabindex="-1">自定义事件 <a class="header-anchor" href="#自定义事件" aria-label="Permalink to &quot;自定义事件&quot;">​</a></h2><p>自定义事件的代码如下：</p><pre><code>    var myEvent = new Event(&#39;clickTest&#39;);
    element.addEventListener(&#39;clickTest&#39;, function () {
        console.log(&#39;smyhvae&#39;);
    });

	//元素注册事件
    element.dispatchEvent(myEvent); //注意，参数是写事件对象 myEvent，不是写 事件名 clickTest
</code></pre><p>上面这个事件是定义完了之后，就直接自动触发了。在正常的业务中，这个事件一般是和别的事件结合用的。比如延时器设置按钮的动作：</p><pre><code>    var myEvent = new Event(&#39;clickTest&#39;);

    element.addEventListener(&#39;clickTest&#39;, function () {
        console.log(&#39;smyhvae&#39;);
    });

    setTimeout(function () {
        element.dispatchEvent(myEvent); //注意，参数是写事件对象 myEvent，不是写 事件名 clickTest
    }, 1000);
</code></pre><h2 id="事件委托" tabindex="-1">事件委托 <a class="header-anchor" href="#事件委托" aria-label="Permalink to &quot;事件委托&quot;">​</a></h2><p>举例：当需要监听多个 li 的点击事件，可以将事件绑定在 ul 上，通过 <code>event.target</code> 拿到被点击的 li。</p><p>作用：事件委托是利用了冒泡机制，减少了事件绑定的次数，减少内存消耗，提高性能。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- html --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击测试1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击测试2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击测试3&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击测试4&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ul</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> liList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;li&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ul.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 获取点击的 li 元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.target</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 获取点击的 li 索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.indexOf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(liList, target)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div><p><strong>原文：</strong> <a href="https://github.com/qianguyihao/Web/blob/master/04-JavaScript%E5%9F%BA%E7%A1%80/47-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98.md" target="_blank" rel="noreferrer">https://github.com/qianguyihao/Web/blob/master/04-JavaScript基础/47-事件委托.md</a></p>`,92),l=[n];function p(h,r,o,d,k,c){return s(),a("div",null,l)}const u=i(t,[["render",p]]);export{g as __pageData,u as default};
