import{_ as t,c as e,o as a,a2 as l}from"./chunks/framework.Bek_Mmwg.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"网络请求/http/http协议.md","filePath":"网络请求/http/http协议.md"}'),r={name:"网络请求/http/http协议.md"},p=l(`<ul><li><a href="#http协议的主要特点">HTTP协议的主要特点</a><ul><li><a href="#简单快速">简单快速</a></li><li><a href="#灵活">灵活</a></li><li><a href="#无连接">无连接</a></li><li><a href="#无状态">无状态</a></li></ul></li><li><a href="#http报文的组成部分">HTTP报文的组成部分</a><ul><li><a href="#请求报文包括">请求报文包括：</a></li><li><a href="#响应报文包括">响应报文包括：</a></li></ul></li><li><a href="#http方法">HTTP方法</a></li><li><a href="#get-和-post的区别">get 和 post的区别</a></li><li><a href="#http状态码">http状态码</a></li><li><a href="#持久链接http长连接">持久链接/http长连接</a></li><li><a href="#长连接中的管线化">长连接中的管线化</a><ul><li><a href="#管线化的原理">管线化的原理</a></li><li><a href="#管线化的注意事项">管线化的注意事项</a></li></ul></li><li><a href="#tcp协议">TCP协议</a><ul><li><a href="#tcp三次握手">TCP三次握手</a></li><li><a href="#tcp四次挥手">TCP四次挥手</a></li></ul></li><li><a href="#https的原理和作用">HTTPS的原理和作用</a></li><li><a href="#http1和http2的区别">http1和http2的区别</a></li></ul><h2 id="http协议的主要特点" tabindex="-1">HTTP协议的主要特点 <a class="header-anchor" href="#http协议的主要特点" aria-label="Permalink to &quot;HTTP协议的主要特点&quot;">​</a></h2><ul><li><p>简单快速</p></li><li><p>灵活</p></li><li><p><strong>无连接</strong></p></li><li><p><strong>无状态</strong></p></li></ul><p>通常我们要答出以上四个内容。如果实在记不住，一定要记得后面的两个： <strong>无连接、无状态</strong> 。</p><p>我们分别来解释一下。</p><h3 id="简单快速" tabindex="-1">简单快速 <a class="header-anchor" href="#简单快速" aria-label="Permalink to &quot;简单快速&quot;">​</a></h3><p><strong>简单</strong> ：每个资源（比如图片、页面）都通过 url 来定位。这都是固定的，在http协议中，处理起来也比较简单，想访问什么资源，直接输入url即可。</p><h3 id="灵活" tabindex="-1">灵活 <a class="header-anchor" href="#灵活" aria-label="Permalink to &quot;灵活&quot;">​</a></h3><p>http协议的头部有一个<code>数据类型</code>，通过http协议，就可以完成不同数据类型的传输。</p><h3 id="无连接" tabindex="-1">无连接 <a class="header-anchor" href="#无连接" aria-label="Permalink to &quot;无连接&quot;">​</a></h3><p>连接一次，就会断开，不会继续保持连接。</p><h3 id="无状态" tabindex="-1">无状态 <a class="header-anchor" href="#无状态" aria-label="Permalink to &quot;无状态&quot;">​</a></h3><p>客户端和服务器端是两种身份。第一次请求结束后，就断开了，第二次请求时， <strong>服务器端并没有记住之前的状态</strong> ，也就是说，服务器端无法区分客户端是否为同一个人、同一个身份。</p><p>有的时候，我们访问网站时，网站能记住我们的账号，这个是通过其他的手段（比如 session）做到的，并不是http协议能做到的。</p><h2 id="http报文的组成部分" tabindex="-1">HTTP报文的组成部分 <a class="header-anchor" href="#http报文的组成部分" aria-label="Permalink to &quot;HTTP报文的组成部分&quot;">​</a></h2><p><a href="https://camo.githubusercontent.com/3776b3dd209ee8fb439e9cc7a718e1d96a9961b1d9249ddd2807e6776b3ba72d/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313430302e706e67" target="_blank" rel="noreferrer"><img src="https://camo.githubusercontent.com/3776b3dd209ee8fb439e9cc7a718e1d96a9961b1d9249ddd2807e6776b3ba72d/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313430302e706e67" alt=""></a></p><p>在回答此问题时，我们要按照顺序回答：</p><ul><li><p>先回答的是，http报文包括： <strong>请求报文</strong> 和 <strong>响应报文</strong> 。</p></li><li><p>再回答的是，每个报文包含什么部分。</p></li><li><p>最后回答，每个部分的内容是什么</p></li></ul><h3 id="请求报文包括" tabindex="-1">请求报文包括： <a class="header-anchor" href="#请求报文包括" aria-label="Permalink to &quot;请求报文包括：&quot;">​</a></h3><p><a href="https://camo.githubusercontent.com/3cdd2cfe28502eb329d61b00f68bf4be6d1d7b93ce55c85b02563cc1ed846efa/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303232385f313530352e6a7067" target="_blank" rel="noreferrer"><img src="https://camo.githubusercontent.com/3cdd2cfe28502eb329d61b00f68bf4be6d1d7b93ce55c85b02563cc1ed846efa/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303232385f313530352e6a7067" alt=""></a></p><ul><li><p>请求行：包括请求方法、请求的url、http协议及版本。</p></li><li><p>请求头：一大堆的键值对。</p></li><li><p><strong>空行</strong> 指的是：当服务器在解析请求头的时候，如果遇到了空行，则表明，后面的内容是请求体。</p></li><li><p>请求体：数据部分。</p></li></ul><h3 id="响应报文包括" tabindex="-1">响应报文包括： <a class="header-anchor" href="#响应报文包括" aria-label="Permalink to &quot;响应报文包括：&quot;">​</a></h3><p><a href="https://camo.githubusercontent.com/5a06f9e21a22759fff5cbd19d73e11cd0e6e79ddf927bb5da379039b7d346f47/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303232385f313531302e6a7067" target="_blank" rel="noreferrer"><img src="https://camo.githubusercontent.com/5a06f9e21a22759fff5cbd19d73e11cd0e6e79ddf927bb5da379039b7d346f47/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303232385f313531302e6a7067" alt=""></a></p><ul><li><p>状态行：http协议及版本、状态码及状态描述。</p></li><li><p>响应头</p></li><li><p>空行</p></li><li><p>响应体</p></li></ul><h2 id="http方法" tabindex="-1">HTTP方法 <a class="header-anchor" href="#http方法" aria-label="Permalink to &quot;HTTP方法&quot;">​</a></h2><p>包括：</p><ul><li><p>GET：获取资源</p></li><li><p>POST：传输资源</p></li><li><p>put：更新资源</p></li><li><p>DELETE：删除资源</p></li><li><p>HEAD：获得报文首部</p></li></ul><p>HTTP方法有很多，但是上面这五个方法，要求在面试时全部说出来，不要漏掉。</p><p>get 和 post 比较常见。</p><p>put 和 delete 在实际应用中用的很少。况且，业务中，一般不删除服务器端的资源。</p><p>head 可能偶尔用的到。</p><h2 id="get-和-post的区别" tabindex="-1">get 和 post的区别 <a class="header-anchor" href="#get-和-post的区别" aria-label="Permalink to &quot;get 和 post的区别&quot;">​</a></h2><p><a href="https://camo.githubusercontent.com/eb94fc7050d60f1ba087c92805b0b4f5ba3b331fb790e5b5fc3b926f7216e28e/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313431352e706e67" target="_blank" rel="noreferrer"><img src="https://camo.githubusercontent.com/eb94fc7050d60f1ba087c92805b0b4f5ba3b331fb790e5b5fc3b926f7216e28e/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313431352e706e67" alt=""></a></p><p>区别有很多，如果记不住，面试时，至少要任意答出其中的三四条。</p><p>有一点要强调， <strong>get是相对不隐私的，而post是相对隐私的</strong> 。</p><p>我们大概要记住以下几点：</p><p>1、浏览器在回退时，get <strong>不会重新请求</strong> ，但是post会重新请求。【重要】</p><p>2、get请求会被浏览器 <strong>主动缓存</strong> ，而post不会。【重要】</p><p>3、get请求的参数，会 <strong>保留</strong> 在浏览器的 <strong>历史记录</strong> 里，而post不会。做业务时要注意。为了防止CSRF攻击，很多公司把get统一改成了post。</p><p>4、get请求在url中传递的参数有大小限制，基本是2kb，不同的浏览器略有不同。而post没有限制。</p><p>5、get的参数是直接暴露在url上的，相对不安全。而post是放在请求体中的。</p><h2 id="http状态码" tabindex="-1">http状态码 <a class="header-anchor" href="#http状态码" aria-label="Permalink to &quot;http状态码&quot;">​</a></h2><p>http状态码分类：</p><p><a href="https://camo.githubusercontent.com/f6cb65a6c2747251a830bc7a74cf514bbef7f05e7434f41145ea9b790aadc595/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313433302e706e67" target="_blank" rel="noreferrer"><img src="https://camo.githubusercontent.com/f6cb65a6c2747251a830bc7a74cf514bbef7f05e7434f41145ea9b790aadc595/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313433302e706e67" alt=""></a></p><p>部分解释：</p><ul><li>200 OK，表示从客户端发来的请求在服务器端被正常处理了。</li><li>204 No content ，表示请求处理成功，但没有资源返回。</li><li>301 moved permanently，表示永久性重定向。表示请求的资源被分配了新的URI，以后应使用资源现在所指的URI。</li><li>302 found，表示临时性重定向。</li><li>304 表示客户端发送附带条件的请求时（指采用GET方法的请求报文中包含if-matched,if-modified-since,if-none-match,if-range,if-unmodified-since任一个首部）服务器端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回304Modified（服务器端资源未改变，可直接使用客户端未过期的缓存）</li><li>400 bad request，表示请求报文中存在语法错误。</li><li>401 unauthorized，表示未授权</li><li>403 forbidden，表示对请求资源的访问被服务器拒绝了</li><li>404 not found，表示服务器上无法找到请求的资源。</li><li>500 internal sever error，表示服务器端在执行请求时发生了错误。</li><li>501 Not Implemented，服务器不支持当前请求所需要的某个功能</li><li>503 service unavailable，表示服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li></ul><h2 id="持久链接-http长连接" tabindex="-1">持久链接/http长连接 <a class="header-anchor" href="#持久链接-http长连接" aria-label="Permalink to &quot;持久链接/http长连接&quot;">​</a></h2><blockquote><p>如果你能答出持久链接，这是面试官很想知道的一个点。</p></blockquote><ul><li><p><strong>轮询</strong> ：http1.0中，客户端每隔很短的时间，都会对服务器发出请求，查看是否有新的消息，只要轮询速度足够快，例如1秒，就能给人造成交互是实时进行的印象。这种做法是无奈之举，实际上对服务器、客户端双方都造成了大量的性能浪费。</p></li><li><p><strong>长连接</strong> ：HTTP1.1中，通过使用Connection:keep-alive进行长连接，。客户端只请求一次，但是服务器会将继续保持连接，当再次请求时，避免了重新建立连接。</p></li></ul><p>注意，HTTP 1.1默认进行持久连接。在一次 TCP 连接中可以完成多个 HTTP 请求，但是对 <strong>每个请求仍然要单独发 header</strong> ，Keep- Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。</p><h2 id="长连接中的管线化" tabindex="-1">长连接中的管线化 <a class="header-anchor" href="#长连接中的管线化" aria-label="Permalink to &quot;长连接中的管线化&quot;">​</a></h2><blockquote><p>如果能答出 <strong>管线化</strong> ，则属于加分项。</p></blockquote><h3 id="管线化的原理" tabindex="-1">管线化的原理 <a class="header-anchor" href="#管线化的原理" aria-label="Permalink to &quot;管线化的原理&quot;">​</a></h3><p>长连接时， <strong>默认</strong> 的请求这样的：</p><pre><code>	请求1 --&gt; 响应1 --&gt;请求2 --&gt; 响应2 --&gt; 请求3 --&gt; 响应3
</code></pre><p>长连接中的管线化，请求是这样的：</p><pre><code>	请求1 --&gt; 请求2 --&gt; 请求3 --&gt; 响应1 --&gt; 响应2 --&gt; 响应3
</code></pre><p>管线化就是，我把现在的请求打包，一次性发过去，你也给我一次响应回来。</p><h3 id="管线化的注意事项" tabindex="-1">管线化的注意事项 <a class="header-anchor" href="#管线化的注意事项" aria-label="Permalink to &quot;管线化的注意事项&quot;">​</a></h3><p>面试时，不会深究管线化。如果真要问你，就回答：“我没怎么研究过，准备回去看看~”</p><h2 id="tcp协议" tabindex="-1">TCP协议 <a class="header-anchor" href="#tcp协议" aria-label="Permalink to &quot;TCP协议&quot;">​</a></h2><p>中文名：传输控制协议（Transmission Control Protocol）。是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p><p>http 和 TCP 的关系？</p><p>http协议是位于应用层，用来定义 request 和 response 的规则，而 TCP 位于传输层，用来传输客户端、服务端的 request、response。</p><h3 id="tcp三次握手" tabindex="-1">TCP三次握手 <a class="header-anchor" href="#tcp三次握手" aria-label="Permalink to &quot;TCP三次握手&quot;">​</a></h3><p><strong>含义</strong></p><p>由于TCP是面向连接的，所以客户端和服务端发送数据前要先建立一条连接在TCP/IP协议中，连接建立成功后再开始正式传输数据，TCP三次握手就是用于建立该连接。</p><p><strong>步骤</strong></p><ol><li><p>第一次握手: 客户端发送请求，询问是否同意建立连接</p></li><li><p>第二次握手: 服务器收到信息, 并请求与客户端建立连接</p></li><li><p>第三次握手: 客户端收到信息系, 同意与服务器建立连接</p></li></ol><p><strong>作用</strong></p><p>一、二次握手是为了保证服务端能接收客户端信息并作出应答，二、三次握手是为了保证客户端能接受到服务端信息并做应答。</p><h3 id="tcp四次挥手" tabindex="-1">TCP四次挥手 <a class="header-anchor" href="#tcp四次挥手" aria-label="Permalink to &quot;TCP四次挥手&quot;">​</a></h3><p><strong>含义</strong></p><p>当数据传输完毕，就需要断开TCP连接，TCP四次挥手就是用于断开TCP连接。</p><p><strong>步骤</strong></p><ol><li><p>第一次分手: 客户端发送断开请求</p></li><li><p>第二次分手: 服务器收到断开请求, 发送同意断开连接的请求</p></li><li><p>第三次分手: 服务器发送请求断开连接</p></li><li><p>第四次分手: 客户端收到, 发送同意断开连接</p></li></ol><h2 id="https的原理和作用" tabindex="-1">HTTPS的原理和作用 <a class="header-anchor" href="#https的原理和作用" aria-label="Permalink to &quot;HTTPS的原理和作用&quot;">​</a></h2><p>HTTPS 还是通过了 HTTP 来传输信息，但是信息通过 TLS 协议进行了加密。</p><p>要讲清楚https，需要知道以下几个知识点</p><ol><li>对称加密与非对称加密的概念</li><li>SSL/TLS 协议的含义</li><li>CA 证书的用途</li></ol><p><strong>对称加密与非对称加密</strong></p><p>秘钥：一种算法</p><p>加密：通过秘钥将明文变成密文的过程</p><p>解密：通过秘钥将密文变成明文的过程</p><p>对称加密：对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密</p><p>非对称加密：有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道</p><p><strong>SSL/TLS 协议</strong></p><p><strong>作用</strong>：http 协议是明文的，存在传输内容会被偷窥和篡改等问题，SSL协议就是为了解决这些问题。</p><p>1999年，SSL被标准化，标准化后改名为 TLS（Transport Layer Security），中文叫“传输层安全协议”。所以 SSL 和 TLS 指的是同一个东西。</p><p><strong>TLS 握手过程</strong></p><p><img src="https://yck-1254263422.cos.ap-shanghai.myqcloud.com/blog/2019-06-01-043749.jpg" alt=""></p><ol><li>客户端发送一个随机值，需要的协议和加密方式</li><li>服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协议和加密方式来使用对应的方式，发送自己的证书（如果需要验证客户端证书需要说明）</li><li>客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书</li><li>服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密</li></ol><p>通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信。</p><h2 id="http1和http2的区别" tabindex="-1">http1和http2的区别 <a class="header-anchor" href="#http1和http2的区别" aria-label="Permalink to &quot;http1和http2的区别&quot;">​</a></h2><p>http1存在队头阻塞问题（同一个域名下限制最大请求数）。</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">传输方式</th><th style="text-align:center;">多路复用</th><th style="text-align:center;">header压缩</th><th style="text-align:center;">服务器推送</th></tr></thead><tbody><tr><td style="text-align:center;">http1</td><td style="text-align:center;">文本</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">http2</td><td style="text-align:center;">二进制</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td></tr></tbody></table><p><strong>辅助记忆</strong></p><p>推广二多头：推广表示服务器推送，二多头为&quot;二锅头谐音&quot;</p><p><strong>原文：</strong></p><p><a href="https://github.com/qianguyihao/Web/blob/master/13-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/01-%E9%9D%A2%E8%AF%95%E5%BF%85%E7%9C%8B/04-HTTP%E5%8D%8F%E8%AE%AE.md" target="_blank" rel="noreferrer">https://github.com/qianguyihao/Web/blob/master/13-前端面试/01-面试必看/04-HTTP协议.md</a></p>`,100),i=[p];function o(h,n,s,d,c,f){return a(),e("div",null,i)}const u=t(r,[["render",o]]);export{g as __pageData,u as default};
