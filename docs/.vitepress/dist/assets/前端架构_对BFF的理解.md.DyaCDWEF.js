import{_ as o,c as e,o as t,a2 as a}from"./chunks/framework.Bek_Mmwg.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端架构/对BFF的理解.md","filePath":"前端架构/对BFF的理解.md"}'),r={name:"前端架构/对BFF的理解.md"},i=a('<h2 id="什么是bff" tabindex="-1">什么是BFF <a class="header-anchor" href="#什么是bff" aria-label="Permalink to &quot;什么是BFF&quot;">​</a></h2><p>BBF - backend for frontend：<strong>服务于前端的后端</strong>。</p><p>通常指基于 node 的 express 或 koa 实现的中间层，该层会向服务端请求获取数据，然后按前端界面需求处理数据并相应给前端。</p><h2 id="为什么要用bff" tabindex="-1">为什么要用BFF <a class="header-anchor" href="#为什么要用bff" aria-label="Permalink to &quot;为什么要用BFF&quot;">​</a></h2><p>最开始的开发，通常是由 Java 类的语言实现 Api，前端直连 Api 获取、处理数据，最终渲染页面。</p><p>近年来微服务逐渐兴起，后端一个大型服务会拆分为多个小服务。前端如果直连多个服务的话成本太高，所以出现了以下几种应对方案：</p><ol><li>Api Getway</li><li>cors</li><li>BBF</li></ol><p>前两个简单介绍下：</p><p><strong>Api Gerway</strong>，又称Api网关，本质上是一个服务器，他的功能包含了统一接入、协议适配、流量管理与容错、以及安全防护。所以客户端请求时直接请求Api网关，由网关来分发给不同的服务去处理。</p><p><strong>cors</strong>：跨域资源共享。前端通过cors来实现对不同服务的直连请求。维护成本太高，不推荐此方法。</p><p><strong>BBF是如何处理的呢？</strong></p><p>将组装、聚合、裁剪这部分业务单独拎出来，组成一个叫Back-end for Front-end的中间层。由 node 配合 express 或 koa 做请求转发和数据转化。前端不同平台都通过 BFF 来获取数据。</p><p><strong>优势</strong></p><ol><li>服务端无需过多关心前端界面，只需提供粗粒度的接口</li><li>琐碎的api及数据处理都由前端决定，更能适配到前端不同平台</li><li>BFF借助插件能生成Api文档，无需后端单开这类服务</li><li>能更灵活得应对需求改变</li></ol><p><strong>劣势</strong></p><ol><li>由于请求增加了转发过程，所以请求会延时</li><li>增加了 BFF 端的开发成本</li></ol>',16),n=[i];function s(p,l,_,c,F,d){return t(),e("div",null,n)}const h=o(r,[["render",s]]);export{B as __pageData,h as default};
