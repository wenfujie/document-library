import{_ as i,c as l,o as s,a2 as a}from"./chunks/framework.Bek_Mmwg.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端基础/html/html面试题.md","filePath":"前端基础/html/html面试题.md"}'),t={name:"前端基础/html/html面试题.md"},e=a(`<ul><li><a href="#doctype-html作用">&lt;!DOCTYPE html&gt;作用</a></li><li><a href="#html严格模式混杂模式">html严格模式、混杂模式</a></li><li><a href="#标签语义化">标签语义化</a></li><li><a href="#h5新特性">H5新特性</a></li><li><a href="#常见的浏览器内核对内核的理解">常见的浏览器内核，对内核的理解</a></li></ul><h2 id="doctype-html-作用" tabindex="-1">&lt;!DOCTYPE html&gt;作用 <a class="header-anchor" href="#doctype-html-作用" aria-label="Permalink to &quot;\\&lt;!DOCTYPE html&gt;作用&quot;">​</a></h2><p>&lt;!DOCTYPE&gt; 声明位于文档中的最前面的位置，处于 &lt;html&gt; 标签之前。</p><p>&lt;!DOCTYPE&gt; 声明不是一个 HTML 标签；它是用来告知 Web 浏览器页面使用了哪种 HTML 版本。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- html标准 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="html严格模式、混杂模式" tabindex="-1">html严格模式、混杂模式 <a class="header-anchor" href="#html严格模式、混杂模式" aria-label="Permalink to &quot;html严格模式、混杂模式&quot;">​</a></h2><ul><li>严格模式：严格模式的排版和JS运作模式是以该浏览器支持的最高标准运行。</li><li>混杂模式：混杂模式的页面以宽松的向后兼容的方式显示；模拟老的浏览器的行为以防止站点无法工作。</li></ul><p>当html文档首行有定义&lt;!DOCTYPE&gt; 时，会以该行定义的规则来以严格模式解析</p><p>当未定义 &lt;!DOCTYPE&gt; 时，以混杂模式解析</p><p><strong>判断当前页面处于什么模式</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.compatMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;BackCompat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;混杂模式&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.compatMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;CSS1Compat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;严格模式&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="标签语义化" tabindex="-1">标签语义化 <a class="header-anchor" href="#标签语义化" aria-label="Permalink to &quot;标签语义化&quot;">​</a></h2><p>什么是标签语义化？</p><p>用合适的标签做合适的事。</p><p>标签语义化的好处？</p><ul><li>阅读性高，更易维护</li><li>搜索引擎更好的识别，利于SEO</li><li>便于未来扩展</li></ul><p>比如：</p><ul><li>header：页头</li><li>main：标识主题内容，通常在body标签下</li><li>footer：页脚</li><li>nav：主导航</li><li>aside：侧边栏</li><li>article：文章</li><li>dialog：弹窗</li></ul><h2 id="h5新特性" tabindex="-1">H5新特性 <a class="header-anchor" href="#h5新特性" aria-label="Permalink to &quot;H5新特性&quot;">​</a></h2><ol><li>标签语义化</li><li>音视频标签，audio、video</li><li>表单 <ul><li>input标签新增type类型：date、color、month、email、tel、url等</li><li>新增表单元素：keygen（公钥私钥），datalist，progress，meter，output</li><li>新增表单属性：placeholder，min/max，pattern，required，width，height，multitype</li></ul></li><li>移除元素：big、font、center、frameset、frame</li><li>canvas画布</li><li>svg矢量图</li><li>web storage。包含localstorage、sessionStorage、cookie、session</li><li>新增属性：window.navigator.geolocation，获取用户地理位置</li><li>WebSocket：实现浏览器与服务器全双工通讯，无同源策略限制，服务器可主动推送数据到浏览器</li><li>WebWorker：在主进程中开启一个异步线程，在主线程以外运行，执行时长久的代码可以用WebWorker来执行</li><li>postMessage：解决不同窗口通讯，支持跨域。</li></ol><h2 id="常见的浏览器内核-对内核的理解" tabindex="-1">常见的浏览器内核，对内核的理解 <a class="header-anchor" href="#常见的浏览器内核-对内核的理解" aria-label="Permalink to &quot;常见的浏览器内核，对内核的理解&quot;">​</a></h2><ol><li>Chrome浏览器：以前用WebKit内核，现在是Blink内核</li><li>IE浏览器：Trident内核，俗称IE内核</li><li>Firefox浏览器：Gecko内核</li><li>Safsri浏览器：WebKit内核</li></ol><p>浏览器内核分为两部分：</p><ul><li>渲染引擎：取得网页内容渲染页面</li><li>JS引擎：解析javascript代码，实现页面交互</li></ul>`,24),h=[e];function n(p,o,r,k,d,E){return s(),l("div",null,h)}const m=i(t,[["render",n]]);export{g as __pageData,m as default};
