import{_ as a,c as t,o as h,a2 as i,l as s}from"./chunks/framework.Bek_Mmwg.js";const l="/assets/no_huisu.NeiS5U78.jpg",n="/assets/huisu.DgH2xSfS.jpg",A=JSON.parse('{"title":"《JavaScript 正则表达式迷你书》——老姚，读书笔记","description":"","frontmatter":{},"headers":[],"relativePath":"程序员储备/正则/正则mini书笔记.md","filePath":"程序员储备/正则/正则mini书笔记.md"}'),k={name:"程序员储备/正则/正则mini书笔记.md"},p=i(`<ul><li><a href="#javascript-正则表达式迷你书老姚读书笔记">《JavaScript 正则表达式迷你书》——老姚，读书笔记</a><ul><li><a href="#书的结构">书的结构</a></li><li><a href="#字符匹配">字符匹配</a><ul><li><a href="#横向模糊---">横向模糊 - {}</a></li><li><a href="#纵向模糊---">纵向模糊 - []</a></li><li><a href="#范围表示--">范围表示 -</a></li><li><a href="#排除字符-">排除字符 ^</a></li><li><a href="#常用字符简写">常用字符简写</a></li><li><a href="#量词简写">量词简写</a></li><li><a href="#贪婪匹配惰性匹配">贪婪匹配、惰性匹配</a></li><li><a href="#多选分支-">多选分支 |</a></li><li><a href="#小试牛刀">小试牛刀</a><ul><li><a href="#匹配-16-进制颜色值">匹配 16 进制颜色值</a></li><li><a href="#匹配小时时间">匹配小时时间</a></li><li><a href="#匹配日期-yyyy-mm-dd">匹配日期 yyyy-mm-dd</a></li></ul></li></ul></li><li><a href="#位置匹配">位置匹配</a><ul><li><a href="#开头和结尾--">开头和结尾 ^ $</a></li><li><a href="#单词边界-b-b">单词边界 \\b \\B</a></li><li><a href="#匹配模式位置-p-和-p">匹配模式位置 (?=p) 和 (?!p)</a></li><li><a href="#小试牛刀-1">小试牛刀</a><ul><li><a href="#数字分隔符">数字分隔符</a></li><li><a href="#密码校验">密码校验</a></li></ul></li></ul></li><li><a href="#括号--的作用">括号 () 的作用</a><ul><li><a href="#字符分组">字符分组</a></li><li><a href="#分支结构">分支结构</a></li><li><a href="#分组引用">分组引用</a></li><li><a href="#反向引用">反向引用</a></li><li><a href="#小试牛刀-2">小试牛刀</a><ul><li><a href="#trim-方法">trim 方法</a></li></ul></li></ul></li><li><a href="#回溯法">回溯法</a></li><li><a href="#速查表">速查表</a><ul><li><a href="#字符组">字符组</a></li><li><a href="#量词">量词</a></li><li><a href="#位置">位置</a></li><li><a href="#括号的作用">括号的作用</a></li><li><a href="#修饰符">修饰符</a></li><li><a href="#string-相关实例方法">String 相关实例方法</a></li><li><a href="#regexp-相关实例方法">RegExp 相关实例方法</a></li></ul></li></ul></li></ul><h1 id="《javascript-正则表达式迷你书》——老姚-读书笔记" tabindex="-1">《JavaScript 正则表达式迷你书》——老姚，读书笔记 <a class="header-anchor" href="#《javascript-正则表达式迷你书》——老姚-读书笔记" aria-label="Permalink to &quot;《JavaScript 正则表达式迷你书》——老姚，读书笔记&quot;">​</a></h1><h2 id="书的结构" tabindex="-1">书的结构 <a class="header-anchor" href="#书的结构" aria-label="Permalink to &quot;书的结构&quot;">​</a></h2><p><a href="https://github.com/qdlaoyao/js-regex-mini-book" target="_blank" rel="noreferrer">《JS 正则迷你书》</a></p><p>正则即匹配，要么匹配字符，要么匹配位置。</p><ul><li>第 1,2 章讲解基础，使用括号捕获数据</li><li>第 3 章讲括号的作用，了解匹配原理</li><li>第 4 章讲回溯法原理，正则得会看会写</li><li>第 5 章从读的角度拆分正则</li><li>第 6 章从写的角度构建正则</li><li>第 7 章讲用户、API、注意事项</li></ul><h2 id="字符匹配" tabindex="-1">字符匹配 <a class="header-anchor" href="#字符匹配" aria-label="Permalink to &quot;字符匹配&quot;">​</a></h2><p>模糊匹配主要考察 <code>{}</code> <code>[]</code> 及 <code>多选分支</code> 的使用。</p><h3 id="横向模糊" tabindex="-1">横向模糊 - {} <a class="header-anchor" href="#横向模糊" aria-label="Permalink to &quot;横向模糊 - {}&quot;">​</a></h3><p>横向模糊：字符确定但出现的次数不定。</p><p><code>{m, n}</code> 表示前一个字符出现次数为 m ~ n 次。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b可能出现1-3次</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{1,3}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="纵向模糊" tabindex="-1">纵向模糊 - [] <a class="header-anchor" href="#纵向模糊" aria-label="Permalink to &quot;纵向模糊 - []&quot;">​</a></h3><p>纵向模糊：字符内容不确定。</p><p><code>[abc]</code> 表示为 a,b,c 中任意一个字符。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可能为 1a3 1b3 1c3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[abc]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="范围表示" tabindex="-1">范围表示 - <a class="header-anchor" href="#范围表示" aria-label="Permalink to &quot;范围表示 -&quot;">​</a></h3><p>用 <code>-</code> 来表示连续的值。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[123456abcdefGHIJKLM]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可写成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">6a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">M</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>注：若要把 <code>-</code> 当做字符，在前面添加转义符 <code>\\</code> 即可，如 [a\\-z]</p><h3 id="排除字符" tabindex="-1">排除字符 ^ <a class="header-anchor" href="#排除字符" aria-label="Permalink to &quot;排除字符 ^&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示除abc以外的任意一个字符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">abc]</span></span></code></pre></div><h3 id="常用字符简写" tabindex="-1">常用字符简写 <a class="header-anchor" href="#常用字符简写" aria-label="Permalink to &quot;常用字符简写&quot;">​</a></h3><table><thead><tr><th>字符组</th><th>具体含义</th></tr></thead><tbody><tr><td>\\d</td><td>表示 [0-9]。表示是一位数字。记忆方式：其英文是 digit（数字）。</td></tr><tr><td>\\D</td><td>表示 [^0-9]。表示除数字外的任意字符。</td></tr><tr><td>\\w</td><td>表示 [0-9a-zA-Z_]。表示数字、大小写字母和下划线。记忆方式：w 是 word 的简写，也称单词字符。</td></tr><tr><td>\\W</td><td>表示 [^0-9a-zA-Z_]。非单词字符。</td></tr><tr><td>\\s</td><td>表示 [ \\t\\v\\n\\r\\f]。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s 是 space 的首字母，空白符的单词是 white space。</td></tr><tr><td>\\S</td><td>表示 [^ \\t\\v\\n\\r\\f]。 非空白符。</td></tr><tr><td>.</td><td>表示 [^\\n\\r\\u2028\\u2029]。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号 … 中的每个点，都可以理解成占位符，表示任何类似的东西</td></tr></tbody></table><p>注：[\\d\\D]、[\\w\\W]、[\\s\\S] 和 [^] 任意一个都可以表达任意字符。</p><h3 id="量词简写" tabindex="-1">量词简写 <a class="header-anchor" href="#量词简写" aria-label="Permalink to &quot;量词简写&quot;">​</a></h3><p>若字符出现次数具有不定性，可使用以下简写</p>`,27),e=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"量词"),s("th",null,"具体含义")])]),s("tbody",null,[s("tr",null,[s("td",{"m,":""}),s("td",null,"表示至少出现 m 次。")]),s("tr",null,[s("td",{m:""}),s("td",null,"等价于 {m,m}，表示出现 m 次。")]),s("tr",null,[s("td",null,"?"),s("td",null,"等价于 {0,1}，表示出现或者不出现。记忆方式：问号的意思表示，有吗？")]),s("tr",null,[s("td",null,"+"),s("td",null,"等价于 {1,}，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。")]),s("tr",null,[s("td",null,"*"),s("td",null,"等价于 {0,}，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。")])])],-1),d=i(`<h3 id="贪婪匹配、惰性匹配" tabindex="-1">贪婪匹配、惰性匹配 <a class="header-anchor" href="#贪婪匹配、惰性匹配" aria-label="Permalink to &quot;贪婪匹配、惰性匹配&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2,5}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;123 1234 12345 123456&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; [&quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;12345&quot;]</span></span></code></pre></div><p>该正则意在匹配 2-5 位的连续数字，那 2 位和 5 位数字都会满足条件。</p><ul><li>贪婪匹配：尽量以满足最大条件去匹配，即尽量匹配 5 位数字。</li><li>惰性匹配：尽量以满足最小条件去匹配，即尽量匹配 2 位数字。</li></ul><p>正则默认为贪婪匹配，在量词后加个 <code>?</code> 就可实现惰性匹配</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2,5}?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;123 1234 12345 123456&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; [&quot;12&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;]</span></span></code></pre></div><p>下面罗列所有贪婪和惰性场景</p>`,7),r=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"惰性量词"),s("th",null,"贪婪量词")])]),s("tbody",null,[s("tr",{"m,n":""},[s("td",null,"{m,n}?"),s("td")]),s("tr",{"m,":""},[s("td",null,"{m,}?"),s("td")]),s("tr",null,[s("td",null,"??"),s("td",null,"?")]),s("tr",null,[s("td",null,"+?"),s("td",null,"+")]),s("tr",null,[s("td",null,"*?"),s("td",null,"*")])])],-1),g=i(`<h3 id="多选分支" tabindex="-1">多选分支 | <a class="header-anchor" href="#多选分支" aria-label="Permalink to &quot;多选分支 |&quot;">​</a></h3><p>多选分支意为有多个模式人选其一即可。</p><p>其形式如：(p1|p2|p3)，其中 p1,p2,p3 为子模式匹配其一即可</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">good</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">nice</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;good idea, nice try.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; [&quot;good&quot;, &quot;nice&quot;]</span></span></code></pre></div><p>注：多选分支为惰性，优先级从左到右，匹配上后面的就不再尝试。</p><h3 id="小试牛刀" tabindex="-1">小试牛刀 <a class="header-anchor" href="#小试牛刀" aria-label="Permalink to &quot;小试牛刀&quot;">​</a></h3><h4 id="匹配-16-进制颜色值" tabindex="-1">匹配 16 进制颜色值 <a class="header-anchor" href="#匹配-16-进制颜色值" aria-label="Permalink to &quot;匹配 16 进制颜色值&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #ffbbad</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #Fc01DF</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #FFF</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #ffE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">#(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-9a-fA-F]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{6}|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-9a-fA-F]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{3}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="匹配小时时间" tabindex="-1">匹配小时时间 <a class="header-anchor" href="#匹配小时时间" aria-label="Permalink to &quot;匹配小时时间&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 23:59</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 02:07</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[01][0-9]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[2][0-3]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">):</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-5][0-9]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="匹配日期-yyyy-mm-dd" tabindex="-1">匹配日期 yyyy-mm-dd <a class="header-anchor" href="#匹配日期-yyyy-mm-dd" aria-label="Permalink to &quot;匹配日期 yyyy-mm-dd&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2017-06-10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-9]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{4}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">-(0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[1-9]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-2]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)-(0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[1-9]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[12][0-9]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[01]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="位置匹配" tabindex="-1">位置匹配 <a class="header-anchor" href="#位置匹配" aria-label="Permalink to &quot;位置匹配&quot;">​</a></h2><h3 id="开头和结尾" tabindex="-1">开头和结尾 ^ $ <a class="header-anchor" href="#开头和结尾" aria-label="Permalink to &quot;开头和结尾 ^ $&quot;">​</a></h3><p><code>^</code> 匹配开头，<code>￥</code> 匹配结尾。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^|$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; &quot;#hello#&quot;</span></span></code></pre></div><h3 id="单词边界" tabindex="-1">单词边界 \\b \\B <a class="header-anchor" href="#单词边界" aria-label="Permalink to &quot;单词边界 \\b \\B&quot;">​</a></h3><p><code>\\b</code> 表示单词边界的位置，包括 <code>\\w 与 \\W</code> 之间的位置、<code>^ 与 \\w</code> 之间的位置、<code>\\w 与 $</code> 之间的位置。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[JS] Lesson_01.mp4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; &quot;[#JS#] #Lesson_01#.#mp4#&quot;</span></span></code></pre></div><p><code>\\B</code> 与 <code>\\b</code> 相反，表示非单词边界，具体说来就是 \\w 与 \\w、 \\W 与 \\W、^ 与 \\W，\\W 与 $ 之间的位置。</p><h3 id="匹配模式位置-p-和-p" tabindex="-1">匹配模式位置 (?=p) 和 (?!p) <a class="header-anchor" href="#匹配模式位置-p-和-p" aria-label="Permalink to &quot;匹配模式位置 (?=p) 和 (?!p)&quot;">​</a></h3><p><code>(?=p)</code> 中 p 表示模式，以为匹配 p 模式的位置。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?=l)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; &quot;he#l#lo&quot;</span></span></code></pre></div><p><code>(?!p)</code> 与 <code>(?=p)</code> 相反，表示不匹配 p 模式的位置。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?!l)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; &quot;#h#ell#o#&quot;</span></span></code></pre></div><h3 id="小试牛刀-1" tabindex="-1">小试牛刀 <a class="header-anchor" href="#小试牛刀-1" aria-label="Permalink to &quot;小试牛刀&quot;">​</a></h3><h4 id="数字分隔符" tabindex="-1">数字分隔符 <a class="header-anchor" href="#数字分隔符" aria-label="Permalink to &quot;数字分隔符&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;12345678&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(?=(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{3}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+$</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; &quot;12,345,678&quot;</span></span></code></pre></div><p>其中 <code>(?!^)</code> 用于避免开头为出现分隔符情况</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;122238888&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?=(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{3}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+$</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;,122,238,888&#39;</span></span></code></pre></div><h4 id="密码校验" tabindex="-1">密码校验 <a class="header-anchor" href="#密码校验" aria-label="Permalink to &quot;密码校验&quot;">​</a></h4><p>要求：密码长度 6-12 位，由数字、小写字符和大写字母组成，但必须至少包括 2 种字符。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 前半句很好实现</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-9a-zA-Z]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">{6-12}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>如何实现 <code>至少包括 2 种字符</code> ？</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必须包含数字</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-9]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><code>.*</code> 表示任意个字符，<code>[0-9]</code> 表示一个数字，组合起来就是 n 个字符后有一个数字，其实就是必须包含数字。</p><p>那同时包含两种字符即</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必须包含数字和小写字母</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-9]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(?=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-z]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>组合所有情况</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">((?=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-9]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(?=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-z]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-9]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(?=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[A-Z]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-z]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(?=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[A-Z]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">))</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-9A-Za-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{6,12}$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1234567&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false 全是数字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abcdef&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false 全是小写字母</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ABCDEFGH&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false 全是大写字母</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ab23C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false 不足6位</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ABCDEF234&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true 大写字母和数字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abcdEF234&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true 三者都有</span></span></code></pre></div><h2 id="括号-的作用" tabindex="-1">括号 () 的作用 <a class="header-anchor" href="#括号-的作用" aria-label="Permalink to &quot;括号 () 的作用&quot;">​</a></h2><h3 id="字符分组" tabindex="-1">字符分组 <a class="header-anchor" href="#字符分组" aria-label="Permalink to &quot;字符分组&quot;">​</a></h3><p><code>()</code> 将字符分为一组进行匹配。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(ab)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ababa abbb ababab&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; [&quot;abab&quot;, &quot;ab&quot;, &quot;ababab&quot;]</span></span></code></pre></div><h3 id="分支结构" tabindex="-1">分支结构 <a class="header-anchor" href="#分支结构" aria-label="Permalink to &quot;分支结构&quot;">​</a></h3><p><code>()</code> 中可产生多个分支模式。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">I love (JavaScript</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">Regular Expression)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I love JavaScript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I love Regular Expression&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; true</span></span></code></pre></div><h3 id="分组引用" tabindex="-1">分组引用 <a class="header-anchor" href="#分组引用" aria-label="Permalink to &quot;分组引用&quot;">​</a></h3><p><code>()</code> 可多正则进行分组。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{4}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)-(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)-(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2017-06-12&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; [&quot;2017-06-12&quot;, &quot;2017&quot;, &quot;06&quot;, &quot;12&quot;, index: 0, input: &quot;2017-06-12&quot;]</span></span></code></pre></div><blockquote><p>match 返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的内容，然后是匹配下标，最后是输入的文本。另外，正则表达式是否有修饰符 g，match 返回的数组格式是不一样的。</p></blockquote><h3 id="反向引用" tabindex="-1">反向引用 <a class="header-anchor" href="#反向引用" aria-label="Permalink to &quot;反向引用&quot;">​</a></h3><p>反向引用：在正则中对出现过的分组进行引用。</p><p>看一个匹配 yyyy-mm-dd 的正则</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{4}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2017-06-12&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2017/06/12&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2016-06/12&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string1)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string2)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string3)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div><p>示例中，2016-06/12 也返回了 true，这不是我们想要的。</p><p>那如何让分隔符保持一致？使用反向引用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{4}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2}\\1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2016-06/12&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string4)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre></div><p><code>\\1</code> 表示匹配分组 1 <code>(-|\\/|\\.)</code> 所匹配到的字符。</p><h3 id="小试牛刀-2" tabindex="-1">小试牛刀 <a class="header-anchor" href="#小试牛刀-2" aria-label="Permalink to &quot;小试牛刀&quot;">​</a></h3><h4 id="trim-方法" tabindex="-1">trim 方法 <a class="header-anchor" href="#trim-方法" aria-label="Permalink to &quot;trim 方法&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;  asdas asdas   &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;asdas asdas&#39;</span></span></code></pre></div><h2 id="回溯法" tabindex="-1">回溯法 <a class="header-anchor" href="#回溯法" aria-label="Permalink to &quot;回溯法&quot;">​</a></h2><p>正则表达式匹配字符串的这种方式，有个学名，叫回溯法。</p><blockquote><p>回溯法也称试探法，它的基本思想是：从问题的某一种状态（初始状态）出发，搜索从这种状态出发所能达到的所有“状态”，当一条路走到“尽头”的时候（不能再前进），再后退一步或若干步，从另一种可能“状态”出发，继续搜索，直到所有的“路径”（状态）都试探过。这种不断“前进”、不断“回溯”寻找解的方法，就称作“回溯法”。</p></blockquote><p>回溯法常发生于 <code>贪婪量词</code> 如 b{1,3}、<code>惰性量词</code> 如 \\d{1,3}? 、<code>分支结构</code> 如 /can|candy/ 等。</p><p>无回溯的匹配</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{1,3}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abbbc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>匹配过程：</p><p><img src="`+l+'" alt=""></p><p>有回溯的匹配</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{1,3}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">bbc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abbbc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>匹配过程：</p><p><img src="'+n+'" alt=""></p><h2 id="速查表" tabindex="-1">速查表 <a class="header-anchor" href="#速查表" aria-label="Permalink to &quot;速查表&quot;">​</a></h2><h3 id="字符组" tabindex="-1">字符组 <a class="header-anchor" href="#字符组" aria-label="Permalink to &quot;字符组&quot;">​</a></h3><table><thead><tr><th>模式</th><th>说明</th></tr></thead><tbody><tr><td>[abc]</td><td>匹配 &quot;a&quot;、&quot;b&quot;、&quot;c&quot; 其中任何一个字符。</td></tr><tr><td>[a-d1-4]</td><td>匹配 &quot;a&quot;、&quot;b&quot;、&quot;c&quot;、&quot;d&quot;、&quot;1&quot;、&quot;2&quot;、&quot;3&quot;、&quot;4&quot; 其中任何一个字符。</td></tr><tr><td>[^abc]</td><td>匹配除了 &quot;a&quot;、&quot;b&quot;、&quot;c&quot; 之外的任何一个字符。</td></tr><tr><td>[^a-d1-4]</td><td>匹配除了 &quot;a&quot;、&quot;b&quot;、&quot;c&quot;、&quot;d&quot;、&quot;1&quot;、&quot;2&quot;、&quot;3&quot;、&quot;4&quot; 之外的任何一个字符。</td></tr><tr><td>.</td><td>通配符，匹配除了少数字符（\\n）之外的任意字符。</td></tr><tr><td>\\d</td><td>匹配数字，等价于 [0-9]。</td></tr><tr><td>\\D</td><td>匹配非数字，等价于 [^0-9]。</td></tr><tr><td>\\w</td><td>匹配单词字符，等价于 [a-zA-Z0-9_]。</td></tr><tr><td>\\W</td><td>匹配非单词字符，等价于 [^a-zA-Z0-9_]。</td></tr><tr><td>\\s</td><td>匹配空白符，等价于 [ \\t\\v\\n\\r\\f]。</td></tr><tr><td>\\S</td><td>匹配非空白符，等价于 [^ \\t\\v\\n\\r\\f]。</td></tr></tbody></table><h3 id="量词" tabindex="-1">量词 <a class="header-anchor" href="#量词" aria-label="Permalink to &quot;量词&quot;">​</a></h3>',78),E=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"模式"),s("th",null,"说明")])]),s("tbody",null,[s("tr",null,[s("td",{"n,m":""}),s("td",null,"连续出现 n 到 m 次。贪婪模式。")]),s("tr",null,[s("td",{"n,":""}),s("td",null,"至少连续出现 n 次。贪婪模式。")]),s("tr",null,[s("td",{n:""}),s("td",null,"连续出现 n 次。贪婪模式。")]),s("tr",null,[s("td",null,"?"),s("td",null,"等价于 {0,1}。贪婪模式。")]),s("tr",null,[s("td",null,"+"),s("td",null,"等价于 {1,}。贪婪模式。")]),s("tr",null,[s("td",null,"*"),s("td",null,"等价于 {0,}。贪婪模式。")]),s("tr",null,[s("td",null,"{n,m}?"),s("td",null,"连续出现 n 到 m 次。惰性模式。")]),s("tr",null,[s("td",null,"{n,}?"),s("td",null,"至少连续出现 n 次。惰性模式。")]),s("tr",null,[s("td",null,"{n}?"),s("td",null,"连续出现 n 次。惰性模式。")]),s("tr",null,[s("td",null,"??"),s("td",null,"等价于 {0,1}?。惰性模式。")]),s("tr",null,[s("td",null,"+?"),s("td",null,"等价于 {1,}?。惰性模式。")]),s("tr",null,[s("td",null,"*?"),s("td",null,"等价于 {0,}?。惰性模式。")])])],-1),o=i('<h3 id="位置" tabindex="-1">位置 <a class="header-anchor" href="#位置" aria-label="Permalink to &quot;位置&quot;">​</a></h3><table><thead><tr><th>模式</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>匹配开头的位置，当正则有修饰符 m 时，表示匹配行开头位置。</td></tr><tr><td>$</td><td>匹配结尾的位置，当正则有修饰符 m 时，表示匹配行结尾位置。</td></tr><tr><td>\\b</td><td>匹配单词边界，即，\\w 与 \\W、^ 与 \\w、\\w 与 $ 之间的位置。</td></tr><tr><td>\\B</td><td>匹配非单词边界，即，\\w 与 \\w、\\W 与 \\W、^ 与 \\W，\\W 与 $ 之间的位置。</td></tr><tr><td>(?=abc)</td><td>匹配 &quot;abc&quot; 前面的位置，即此位置后面匹配 &quot;abc&quot;。</td></tr><tr><td>(?!abc)</td><td>匹配非 &quot;abc&quot; 前面的位置，即此位置后面不匹配 &quot;abc&quot;。</td></tr></tbody></table><h3 id="括号的作用" tabindex="-1">括号的作用 <a class="header-anchor" href="#括号的作用" aria-label="Permalink to &quot;括号的作用&quot;">​</a></h3><table><thead><tr><th>模式</th><th>说明</th></tr></thead><tbody><tr><td>(ab)</td><td>捕获型分组。把 &quot;ab&quot; 当成一个整体，比如 (ab)+ 表示 &quot;ab&quot; 至少连续出现一次。</td></tr><tr><td>(?:ab)</td><td>非捕获型分组。与 (ab) 的区别是，它不捕获数据。</td></tr><tr><td>(good|nice)</td><td>捕获型分支结构。匹配 &quot;good&quot; 或 &quot;nice&quot;。</td></tr><tr><td>(?:good|nice)</td><td>非捕获型分支结构。与 (good</td></tr><tr><td>\\num</td><td>反向引用。比如 \\2，表示引用的是第二个括号里的捕获的数据。</td></tr></tbody></table><h3 id="修饰符" tabindex="-1">修饰符 <a class="header-anchor" href="#修饰符" aria-label="Permalink to &quot;修饰符&quot;">​</a></h3><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>g</td><td>全局匹配，找到所有满足匹配的子串。</td></tr><tr><td>i</td><td>匹配过程中，忽略英文字母大小写。</td></tr><tr><td>M</td><td>多行匹配，把 ^ 和 $ 变成行开头和行结尾。</td></tr></tbody></table><h3 id="string-相关实例方法" tabindex="-1">String 相关实例方法 <a class="header-anchor" href="#string-相关实例方法" aria-label="Permalink to &quot;String 相关实例方法&quot;">​</a></h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>search</td><td>返回正则匹配到的第一个子串在目标字符串中的下标位置。</td></tr><tr><td>split</td><td>以正则匹配到的子串，对目标字符串进行切分。返回一个数组。</td></tr><tr><td>match</td><td>对目标字符串执行正则匹配操作，返回的匹配结果数组中包含具体的匹配信息。</td></tr><tr><td>replace</td><td>对目标字符串进行替换操作。正则是其第一个参数。返回替换后的字符串。</td></tr></tbody></table><h3 id="regexp-相关实例方法" tabindex="-1">RegExp 相关实例方法 <a class="header-anchor" href="#regexp-相关实例方法" aria-label="Permalink to &quot;RegExp 相关实例方法&quot;">​</a></h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>test</td><td>判断目标字符串中是否有满足正则匹配的子串。返回布尔值。</td></tr><tr><td>exec</td><td>比 match 更强大的正则匹配操作。返回结果与 match 一致。</td></tr></tbody></table>',10),F=[p,e,d,r,g,E,o];function y(c,u,D,b,C,q){return h(),t("div",null,F)}const v=a(k,[["render",y]]);export{A as __pageData,v as default};
