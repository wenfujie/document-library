import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.Bek_Mmwg.js";const g=JSON.parse('{"title":"分包","description":"","frontmatter":{},"headers":[],"relativePath":"前端性能优化/webpack打包优化.md","filePath":"前端性能优化/webpack打包优化.md"}'),l={name:"前端性能优化/webpack打包优化.md"},e=n(`<ul><li><a href="#分包">分包</a><ul><li><a href="#import-分包">import() 分包</a><ul><li><a href="#分割依赖">分割依赖</a></li><li><a href="#动态组件">动态组件</a></li></ul></li><li><a href="#optimizationsplitchunks-分包">optimization.splitChunks 分包</a><ul><li><a href="#splitchunks-的默认配置">splitChunks 的默认配置</a></li><li><a href="#chunks">chunks</a></li><li><a href="#maxinitialrequests">maxInitialRequests</a></li><li><a href="#maxasyncrequests">maxAsyncRequests</a></li><li><a href="#minchunks">minChunks</a></li><li><a href="#cachegroups">cacheGroups</a></li><li><a href="#实际应用">实际应用</a></li></ul></li><li><a href="#externals">externals</a></li></ul></li></ul><h1 id="分包" tabindex="-1">分包 <a class="header-anchor" href="#分包" aria-label="Permalink to &quot;分包&quot;">​</a></h1><p><strong>辅助工具</strong></p><p><a href="https://github.com/stephencookdev/speed-measure-webpack-plugin" target="_blank" rel="noreferrer">speed-measure-webpack-plugin</a> 可以协助开发人员定位打包耗时瓶颈。</p><p><a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="noreferrer">webpack-bundle-analyzer</a> 插件会以树状图展示项目包大小及 chunk 分布情况，协助分析是否需要分包。</p><h2 id="import-分包" tabindex="-1">import() 分包 <a class="header-anchor" href="#import-分包" aria-label="Permalink to &quot;import() 分包&quot;">​</a></h2><p>使用 <code>import()</code> 动态导入模块时， webpack 会自动把该模块打包为独立的 chunk。</p><h3 id="分割依赖" tabindex="-1">分割依赖 <a class="header-anchor" href="#分割依赖" aria-label="Permalink to &quot;分割依赖&quot;">​</a></h3><p>在遇到体积较大并且非页面初始加载所需模块时，可以使用 <code>import()</code> 对该模块分包，避免将模块打包在初始依赖 chunk 中，导致首屏加载慢。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ❌ bad</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打包后 =&gt; chunk-vendors.js 增加 843kb</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AdyenCheckout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@adyen/adyen-web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AdyenCheckout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configuration);</span></span></code></pre></div><p><code>@adyen/adyen-web</code> 是三方支付 sdk 包，在用户选择商品、选择支付方式后点击提交时会用到，用来唤起支付页面。 该包大小为 843kb，如果直接静态导入，该包会直接打入 <code>chunk-vendors.js</code> 中。页面初始渲染时会依赖 <code>chunk-vendors</code> ，从而导致了首屏白屏时间长问题。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ good</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// submit callback</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onSubmit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 打包后 =&gt; 增加 adyen.js ，chunk-vendors大小不变</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AdyenCheckout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* webpackChunkName: &quot;adyen&quot; */</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@adyen/adyen-web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).default</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  AdyenCheckout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configuration);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>分析：</strong> 由于页面初始渲染时，并不依赖 <code>@adyen/adyen-web</code> 包，而在用户经过一系列操作提交订单时才需唤起支付，所以调整为点击提交按钮时调用 <code>onSubmit</code> 函数并用 <code>import()</code> 进行动态导入，这样包不会打入 <code>chunk-vendors</code> ，而是生成一个独立 chunk <code>adyen.js</code> 。</p><h3 id="动态组件" tabindex="-1">动态组件 <a class="header-anchor" href="#动态组件" aria-label="Permalink to &quot;动态组件&quot;">​</a></h3><p>当组件代码量大或组件内部依赖包的体积过大，我们可以用动态组件的形式进行优化。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../views/Payment/index.vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><strong>配置路由时使用动态组件</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> routes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/payment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Payment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* webpackChunkName: &quot;payment&quot; */</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../views/Payment/index.vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><p><strong>分析：</strong> 若使用静态导入组件，组件内容会被打包到初始 chunk，随着迭代组件内容越来大，路由数量越来越多，初始 chunk 越发臃肿。</p><p>而使用动态组件配置路由，每个组件会打包到独立 chunk，待路由命中时才会加载组件对应 chunk，初始 chunk 不受影响。</p><p><strong>局部注册动态组件</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">component</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> :is=&quot;&#39;Banners&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  export default {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Home&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    components: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Banners</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@/views/Home/components/Banners.vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>分析：</strong> Banners 组件内含 swiper 包（133kb）及其他较大的依赖，一个个得将三方依赖动态导入较为繁琐，当组件在页面中非必须存在时，可以考虑将组件动态化，组件动态化后该组件的代码及其静态依赖都会打包在一个独立的 chunk 下。</p><p>注意：使用局部动态组件时，需关注组件是否存在依赖关系，以及组件异常情况。</p><h2 id="optimization-splitchunks-分包" tabindex="-1">optimization.splitChunks 分包 <a class="header-anchor" href="#optimization-splitchunks-分包" aria-label="Permalink to &quot;optimization.splitChunks 分包&quot;">​</a></h2><p>webpack 有三种分包方式：</p><ul><li>配置多个入口起点 entry</li><li>动态导入，如 import()</li><li>配置 <code>optimization.splitChunks</code> 分包</li></ul><p>这边主要介绍 <code>optimization.splitChunks</code> 的方式。</p><h3 id="splitchunks-的默认配置" tabindex="-1">splitChunks 的默认配置 <a class="header-anchor" href="#splitchunks-的默认配置" aria-label="Permalink to &quot;splitChunks 的默认配置&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    splitChunks: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 表示选择哪些 chunks 进行分割，可选值有：async，initial和all</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      chunks: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;async&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 表示新分离出的chunk必须大于等于minSize</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      minSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      maxSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 表示一个模块至少应被minChunks个chunk所包含才能分割。默认为1。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      minChunks: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 表示按需加载文件时，并行请求的最大数目</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      maxAsyncRequests: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 表示加载入口文件时，并行请求的最大数目</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      maxInitialRequests: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 文件名拼接符，如：vendors~main.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      automaticNameDelimiter: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 根据该字段分包，可以配置多个组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 根据test设置条件，符合test条件的模块，就分配到该组。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 模块可以被多个组引用，但最终会根据priority来决定打包到哪个组中。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 默认将所有来自 node_modules目录的模块打包至vendors组，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 将两个以上的chunk所共享的模块打包至default组。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cacheGroups: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        vendors: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          priority: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        default: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          minChunks: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          priority: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          reuseExistingChunk: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>以上默认配置的含义：</p><ul><li>新的 chunk 可以被共享，或者模块来自于 <code>node_modules</code> 文件夹</li><li>新的 chunk 体积大于 30kb（在进行 min+gz 之前的体积）</li><li>当按需加载 chunks 时，并行请求的最大数量小于或等于 5</li><li>当加载初始化页面时，并发请求的最大数量小于或等于 3</li></ul><h3 id="chunks" tabindex="-1">chunks <a class="header-anchor" href="#chunks" aria-label="Permalink to &quot;chunks&quot;">​</a></h3><p>chunks 作用是限制拆分代码的范围，有效值为 <code>all</code>，<code>async</code> 和 <code>initial</code>。</p><ul><li>默认为 <code>async</code> ，只从异步加载的 chunk 进行拆分。</li><li><code>initial</code> ，只从非异步加载的初始 chunk 进行拆分。</li><li><code>all</code>，即涵盖了 <code>async</code> 和 <code>initial</code> 所对应的 chunk 进行拆分。</li></ul><h3 id="maxinitialrequests" tabindex="-1">maxInitialRequests <a class="header-anchor" href="#maxinitialrequests" aria-label="Permalink to &quot;maxInitialRequests&quot;">​</a></h3><p>初始 chunk 并发数 &lt;= <code>maxInitialRequests</code> 才进行拆分。</p><p>初始 chunk 数即：页面渲染时一开始就要加载的 js，区别于页面加载完成后通过异步加载的 js。</p><h3 id="maxasyncrequests" tabindex="-1">maxAsyncRequests <a class="header-anchor" href="#maxasyncrequests" aria-label="Permalink to &quot;maxAsyncRequests&quot;">​</a></h3><p>异步加载的并发数 &lt;= <code>maxAsyncRequests</code> 才进行拆分。</p><h3 id="minchunks" tabindex="-1">minChunks <a class="header-anchor" href="#minchunks" aria-label="Permalink to &quot;minChunks&quot;">​</a></h3><p>模块被 &gt;= <code>minChunks</code> 个 chunk 引用才进行分割。</p><h3 id="cachegroups" tabindex="-1">cacheGroups <a class="header-anchor" href="#cachegroups" aria-label="Permalink to &quot;cacheGroups&quot;">​</a></h3><p><code>cacheGroups</code> 继承 <code>splitChunks</code> 里的所有属性的值，并且可以在 <code>cacheGroups</code> 中重新赋值，覆盖 <code>splitChunks</code> 的值。另外，还有一些属性只能在 <code>cacheGroups</code> 中使用：<code>test</code>、<code>priority</code> 、<code>reuseExistingChunk</code>。</p><p>通过 <code>cacheGroups</code>，我们可以定义自定义 chunk 组，通过 <code>test</code> 条件对模块进行过滤，符合条件的模块分配到相同的组。</p><p><code>cacheGroups</code> 有两个默认的组，一个是 <code>vendors</code>，包含所有来自 <code>node_modules</code> 目录的模块；一个 <code>default</code>，包含了由两个以上的 chunk 所共享的模块。</p><p><strong>name</strong></p><p>指定当前组 chunk 文件的名称。</p><p><strong>priority</strong></p><p>指定组的优先级。若多个组都匹配分包条件，命中 <code>priorit</code> 最大的那个组</p><h3 id="实际应用" tabindex="-1">实际应用 <a class="header-anchor" href="#实际应用" aria-label="Permalink to &quot;实际应用&quot;">​</a></h3><p><code>splitChunks</code> 主要围绕一下几点来进行配置</p><ol><li>拆分过大的 js 文件；</li><li>合并较小的 js 文件；</li><li>放置模块被重复打包；</li></ol><h2 id="externals" tabindex="-1">externals <a class="header-anchor" href="#externals" aria-label="Permalink to &quot;externals&quot;">​</a></h2><blockquote><p>externals 防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖。</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jquery&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>以上述代码为例，通常情况下 webpack 会去 <code>node_modules</code> 找到 <code>jquery</code> 模块并打包到 chunk 里。</p><p><strong>将 npm 包引入改为 CDN 引入</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  externals: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jquery: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jQuery&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// index.html</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 引入CDN 上的 jquery</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://code.jquery.com/jquery-3.1.0.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  crossorigin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;anonymous&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>如上配置 <code>externals</code> ，webpack 将不再从 <code>node_modules</code> 里打包 <code>jquery</code> 模块代码。然后并通过 script 标签引入模块。</p><p>改造后，如下代码可以正常执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jquery&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.my-element&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">animate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>当 <code>import $ from &#39;jquery&#39;</code> 执行时，会从全局变量 jQuery 获取到模块，从而能正常使用模块。</p>`,64),h=[e];function t(p,k,d,r,c,o){return a(),i("div",null,h)}const u=s(l,[["render",t]]);export{g as __pageData,u as default};
