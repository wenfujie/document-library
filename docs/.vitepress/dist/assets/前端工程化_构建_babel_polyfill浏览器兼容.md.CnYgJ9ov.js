import{_ as e,c as a,o as i,a2 as l}from"./chunks/framework.Bek_Mmwg.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端工程化/构建/babel+polyfill浏览器兼容.md","filePath":"前端工程化/构建/babel+polyfill浏览器兼容.md"}'),s={name:"前端工程化/构建/babel+polyfill浏览器兼容.md"},r=l(`<ul><li><a href="#旧版浏览器的两种语法兼容问题">旧版浏览器的两种语法兼容问题</a></li><li><a href="#解决问题的工具">解决问题的工具</a><ul><li><a href="#preset-env">preset-env</a></li><li><a href="#plugin-transform-runtime">plugin-transform-runtime</a></li><li><a href="#runtime-corejs3">runtime-corejs3</a></li><li><a href="#示例-demo">示例 demo</a></li></ul></li></ul><h2 id="旧版浏览器的两种语法兼容问题" tabindex="-1">旧版浏览器的两种语法兼容问题 <a class="header-anchor" href="#旧版浏览器的两种语法兼容问题" aria-label="Permalink to &quot;旧版浏览器的两种语法兼容问题&quot;">​</a></h2><p>旧版浏览器语法兼容分为两种类型</p><ul><li>语法降级</li><li>polyfill 缺失</li></ul><p>语法降级，比如使用了 ES6 的箭头函数，需转换为原始函数写法。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 语法降级</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre></div><p>polyfill 缺失，比如使用了 ES6 的 Promise ，在旧版浏览器需注入 Promise 对象，为浏览器注入新 API 的代码又称 <code>垫片</code> (polyfill)，以此来保证产物的完整性。</p><h2 id="解决问题的工具" tabindex="-1">解决问题的工具 <a class="header-anchor" href="#解决问题的工具" aria-label="Permalink to &quot;解决问题的工具&quot;">​</a></h2><h3 id="preset-env" tabindex="-1">preset-env <a class="header-anchor" href="#preset-env" aria-label="Permalink to &quot;preset-env&quot;">​</a></h3><p><code>@babel/preset-env</code> 主要用于替换语法降级代码、引入 polyfill 代码，编译时用到（放置于 devDependencies）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f56b93f6e9884779b7197d2ad369034b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="转换后产物"></p><p><code>@babel/preset-env</code> 的一些弊端：</p><ul><li>通过在全局引入 <code>core-js</code> 实现 polyfill ，污染全局</li><li>每个模块打包都生成类似 _asyncToGenerator 等辅助函数，导致产出有很多冗余代码。</li></ul><h3 id="plugin-transform-runtime" tabindex="-1">plugin-transform-runtime <a class="header-anchor" href="#plugin-transform-runtime" aria-label="Permalink to &quot;plugin-transform-runtime&quot;">​</a></h3><p><code>@babel/plugin-transform-runtime</code> 用于优化 <code>@babel/preset-env</code> 处理后的代码，编译时用到（放置于 devDependencies）。</p><ul><li>结合 <code>@babel/runtime-corejs3</code> 实现模块化形式引入 polyfill，避免污染全局。</li><li>结合 <code>@babel/runtime-corejs3</code> 实现模块化形式引入辅助函数，减少冗余代码。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc40d9a6401640058b96c4821e6ff8c1~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="优化后产物对比"></p><h3 id="runtime-corejs3" tabindex="-1">runtime-corejs3 <a class="header-anchor" href="#runtime-corejs3" aria-label="Permalink to &quot;runtime-corejs3&quot;">​</a></h3><blockquote><p>core-js 有三种产物，分别是 core-js、core-js-pure 和 core-js-bundle。第一种是全局 Polyfill 的做法，@babel/preset-env 就是用的这种产物；第二种不会把 Polyfill 注入到全局环境，可以按需引入；第三种是打包好的版本，包含所有的 Polyfill，不太常用。@babel/runtime-corejs3 使用的是第二种产物。</p></blockquote><p><code>@babel/runtime-corejs3</code> ：runtime-corejs3 是基于 <code>core-js-pure</code> 二次封装的基础库，运行时用到（放置于 dependencies）。</p><h3 id="示例-demo" tabindex="-1">示例 demo <a class="header-anchor" href="#示例-demo" aria-label="Permalink to &quot;示例 demo&quot;">​</a></h3><p><a href="https://github.com/wenfujie/demo/tree/main/babel-plugin-transform-runtime" target="_blank" rel="noreferrer">preset-env + plugin-transform-runtime 转换效果</a></p><p><a href="https://github.com/wenfujie/demo/tree/main/babel-preset-env" target="_blank" rel="noreferrer">preset-env 转换效果</a></p>`,23),t=[r];function n(o,p,c,d,h,u){return i(),a("div",null,t)}const f=e(s,[["render",n]]);export{b as __pageData,f as default};
